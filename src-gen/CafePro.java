/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import java.util.LinkedList;
import java.util.Queue;

public class CafePro implements IStatemachine, ITimed {
	public enum State {
		MAIN_STOP,
		MAIN_MENU,
		MAIN_MENU_R1_EFFECTUERMAINTENANCE,
		MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT,
		MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE,
		MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE,
		MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN,
		MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN,
		MAIN_MENU_R1_FAVORI,
		MAIN_MENU_R1_QTEBOISSON,
		MAIN_MENU_R1_DURETEEAU,
		MAIN_MENU_R1_FILTREEAU_,
		MAIN_MENU_R1_ARRÊTAUTOMATIQUE,
		MAIN_MENU_R1_TEMPERATURECAFE,
		MAIN_MENU_R1_NBREBOISSONSSINCEFIRSTUSE,
		MAIN_MENU_R1_BIPSONORE,
		MAIN_MENU_R1_LANGUE,
		MAIN_MENU_R1_NBRECAFEAVENTRETIEN,
		MAIN_MENU_R1_AFFICHEINFOENTRETIEN,
		MAIN_MENU_R1_SETTINGPROPORTIONLAIT,
		MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON,
		MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION,
		MAIN_MENU_R1_SETTINGLANGUE,
		MAIN_MENU_R1_SETTINGBIPSONORE,
		MAIN_MENU_R1_AFFICHEBOISSONSINCEFIRSTTUSE,
		MAIN_MENU_R1_SETTINGFILTREEAU,
		MAIN_MENU_R1_SETTINGTEMPERATURECAFE,
		MAIN_MENU_R1_SETTINGARRETAUTOMATIQUE,
		MAIN_MENU_R1_SETTINGFAVORI,
		MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL,
		MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON,
		MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON,
		MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE,
		MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT,
		MAIN_MENU_R1_PROPORTIONLAIT,
		MAIN_MENU_R1_MAINTENANCE,
		MAIN_MENU_R1_SETTINGQTEBOISSON,
		MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON,
		MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON,
		MAIN_MENU_R1_SETTINGDURETEEAU,
		MAIN_RINÇAGE,
		MAIN_IDLE,
		MAIN_PREPARATION,
		MAIN_PREPARATION_R1_COOKINGLAIT,
		MAIN_PREPARATION_R1_COOKINGEAUCHAUD,
		MAIN_PREPARATION_R1_SETTINGS,
		MAIN_PREPARATION_R1_COOKINGCAFE,
		MAIN_PREPARATION_R1_COOKINGCAFELACTE,
		MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_LAIT,
		MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE,
		MAIN_APPELFAVORI,
		MAIN_SECURITE,
		MAIN_ERREUR,
		MAIN_PANNE,
		MOULIN_DESACTIVEM,
		MOULIN_ACTIVEM,
		TIMER_TIMER,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[14];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public CafePro() {
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setPbFiltreEau(false);
		
		setPbMousseurLait(false);
		
		setPbMoulin(false);
		
		setPbEcran(false);
		
		setPbBandeau(false);
		
		setPbDefailanceSys(false);
		
		setBreakCooking(false);
		
		setMaxBoissonForClean(10);
		
		setMaxBoissonForDetardrage(15);
		
		setMaxBoissonForChangeFiltre(5);
		
		setCounterForClean(0);
		
		setCounterForDetardrage(0);
		
		setCounterForFiltre(0);
		
		setEtatDuFiltre(0);
		
		setFiltrePlace(false);
		
		setQteCafeParBoisson(5);
		
		setQteEauParBoisson(10);
		
		setQteDechetParBoisson(1);
		
		setNivoCollecteur(0);
		
		setProportionLait(30);
		
		setDegreMouture(3);
		
		setMoulin(false);
		
		setEstChaud(false);
		
		setCafeServi(0);
		
		setTampon(false);
		
		setChoixEntretien(1);
		
		setIntensiteCafe(1);
		
		setQteBoisson(0);
		
		setDoubleTasse(false);
		
		setTemps(0);
		
		setTempsArretAuto(160);
		
		setTimeMaintenance(50);
		
		setTimeCooking(10);
		
		setTimeTampon(0);
		
		setQteCafe(50);
		
		setQteEau(80);
		
		setCapaciteCollecteur(10);
		
		setTypeBoisson(1);
		
		setCodeErreur(0);
		
		setMousseurEstSale(false);
		
		setNbreBoissonTampon(0);
		
		setNbreBoissonCook(0);
		
		setCafeMoulu(false);
		
		setLait(false);
		
		setNoOptionMenu(0);
		
		setTxtOptionMenu("Creer/modifier favori");
		
		setProfilEstConfig(false);
		
		setBipSonnore(false);
		
		setLangue(true);
		
		setConnectTubeEtTuyau(false);
		
		setTuyauAlait(false);
		
		setSizeTabBoissonSpecial(0);
		
		setSizeTabLangue(0);
		
		setSizeTabProfil(0);
		
		setSizeTabBoisson(0);
		
		setSizeTabQteBoisson(0);
		
		setSizeTabBoissonLactee(0);
		
		setSizeTabBipSonore(0);
		
		setSizeTabArretAuto(0);
		
		setSizeTabTemperature(0);
		
		setSizeTabFiltreEau(0);
		
		setSizeTabDureteEau(0);
		
		setSizeTabProportion(0);
		
		setIndice(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_default();
		enterSequence_moulin_default();
		enterSequence_timer_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main();
		exitSequence_moulin();
		exitSequence_timer();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		start = false;
		stop = false;
		menu = false;
		btnDeplacement = false;
		btnPrecedant = false;
		btnOk = false;
		btnCafe = false;
		btnLait = false;
		btnCafeLait = false;
		changeOption = false;
		btnIntensiteCafe = false;
		btnQteBoisson = false;
		btnAppelFavori = false;
		btnStartStop = false;
		btnSecurite = false;
		btnEauChaude = false;
		btnMouture = false;
		btnAromDouble = false;
		selectBoissonSpecial = false;
		selectBoisson = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
		timeEvents[9] = false;
		timeEvents[10] = false;
		timeEvents[11] = false;
		timeEvents[12] = false;
		timeEvents[13] = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_STOP:
					main_Stop_react(true);
					break;
				case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT:
					main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait_react(true);
					break;
				case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE:
					main_Menu_r1_effectuerMaintenance_r1_netoyage_react(true);
					break;
				case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE:
					main_Menu_r1_effectuerMaintenance_r1_detartre_react(true);
					break;
				case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN:
					main_Menu_r1_effectuerMaintenance_r1_Calc_Clean_react(true);
					break;
				case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN:
					main_Menu_r1_effectuerMaintenance_r1_entretien_react(true);
					break;
				case MAIN_MENU_R1_FAVORI:
					main_Menu_r1_favori_react(true);
					break;
				case MAIN_MENU_R1_QTEBOISSON:
					main_Menu_r1_QteBoisson_react(true);
					break;
				case MAIN_MENU_R1_DURETEEAU:
					main_Menu_r1_dureteEau_react(true);
					break;
				case MAIN_MENU_R1_FILTREEAU_:
					main_Menu_r1_filtreEau__react(true);
					break;
				case MAIN_MENU_R1_ARRÊTAUTOMATIQUE:
					main_Menu_r1_arr_tAutomatique_react(true);
					break;
				case MAIN_MENU_R1_TEMPERATURECAFE:
					main_Menu_r1_TemperatureCafe_react(true);
					break;
				case MAIN_MENU_R1_NBREBOISSONSSINCEFIRSTUSE:
					main_Menu_r1_NbreBoissonsSinceFirstUse_react(true);
					break;
				case MAIN_MENU_R1_BIPSONORE:
					main_Menu_r1_BipSonore_react(true);
					break;
				case MAIN_MENU_R1_LANGUE:
					main_Menu_r1_Langue_react(true);
					break;
				case MAIN_MENU_R1_NBRECAFEAVENTRETIEN:
					main_Menu_r1_nbreCafeAvEntretien_react(true);
					break;
				case MAIN_MENU_R1_AFFICHEINFOENTRETIEN:
					main_Menu_r1_AfficheInfoEntretien_react(true);
					break;
				case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON:
					main_Menu_r1_settingProportionLait_r1_ChoisirBoisson_react(true);
					break;
				case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION:
					main_Menu_r1_settingProportionLait_r1_choisirProportion_react(true);
					break;
				case MAIN_MENU_R1_SETTINGLANGUE:
					main_Menu_r1_settingLangue_react(true);
					break;
				case MAIN_MENU_R1_SETTINGBIPSONORE:
					main_Menu_r1_settingBipSonore_react(true);
					break;
				case MAIN_MENU_R1_AFFICHEBOISSONSINCEFIRSTTUSE:
					main_Menu_r1_AfficheBoissonSinceFirsttUse_react(true);
					break;
				case MAIN_MENU_R1_SETTINGFILTREEAU:
					main_Menu_r1_settingFiltreEau_react(true);
					break;
				case MAIN_MENU_R1_SETTINGTEMPERATURECAFE:
					main_Menu_r1_settingTemperatureCafe_react(true);
					break;
				case MAIN_MENU_R1_SETTINGARRETAUTOMATIQUE:
					main_Menu_r1_settingArretAutomatique_react(true);
					break;
				case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL:
					main_Menu_r1_settingFavori_r1_selectProfil_react(true);
					break;
				case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON:
					main_Menu_r1_settingFavori_r1_selectBoisson_react(true);
					break;
				case MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON:
					main_Menu_r1_settingFavori_r1_quantiteBoisson_react(true);
					break;
				case MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE:
					main_Menu_r1_settingFavori_r1_intensiteCafe_react(true);
					break;
				case MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT:
					main_Menu_r1_settingFavori_r1_proportionLait_react(true);
					break;
				case MAIN_MENU_R1_PROPORTIONLAIT:
					main_Menu_r1_proportionLait_react(true);
					break;
				case MAIN_MENU_R1_MAINTENANCE:
					main_Menu_r1_maintenance_react(true);
					break;
				case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON:
					main_Menu_r1_settingQteBoisson_r1_QteBoisson_react(true);
					break;
				case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON:
					main_Menu_r1_settingQteBoisson_r1_selectBoisson_react(true);
					break;
				case MAIN_MENU_R1_SETTINGDURETEEAU:
					main_Menu_r1_settingDureteEau_react(true);
					break;
				case MAIN_RINÇAGE:
					main_rin_age_react(true);
					break;
				case MAIN_IDLE:
					main_idle_react(true);
					break;
				case MAIN_PREPARATION_R1_COOKINGLAIT:
					main_preparation_r1_cookingLait_react(true);
					break;
				case MAIN_PREPARATION_R1_COOKINGEAUCHAUD:
					main_preparation_r1_cookingEauChaud_react(true);
					break;
				case MAIN_PREPARATION_R1_SETTINGS:
					main_preparation_r1_settings_react(true);
					break;
				case MAIN_PREPARATION_R1_COOKINGCAFE:
					main_preparation_r1_cookingCafe_react(true);
					break;
				case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_LAIT:
					main_preparation_r1_CookingCafeLActe_r1_lait_react(true);
					break;
				case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE:
					main_preparation_r1_CookingCafeLActe_r1_cafe_react(true);
					break;
				case MAIN_APPELFAVORI:
					main_AppelFavori_react(true);
					break;
				case MAIN_SECURITE:
					main_securite_react(true);
					break;
				case MAIN_ERREUR:
					main_Erreur_react(true);
					break;
				case MAIN_PANNE:
					main_Panne_react(true);
					break;
				case MOULIN_DESACTIVEM:
					moulin_desactiveM_react(true);
					break;
				case MOULIN_ACTIVEM:
					moulin_activeM_react(true);
					break;
				case TIMER_TIMER:
					timer_timer_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while ((((((((((((((((((((((((((((((((((start || stop) || menu) || btnDeplacement) || btnPrecedant) || btnOk) || btnCafe) || btnLait) || btnCafeLait) || changeOption) || btnIntensiteCafe) || btnQteBoisson) || btnAppelFavori) || btnStartStop) || btnSecurite) || btnEauChaude) || btnMouture) || btnAromDouble) || selectBoissonSpecial) || selectBoisson) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]) || timeEvents[7]) || timeEvents[8]) || timeEvents[9]) || timeEvents[10]) || timeEvents[11]) || timeEvents[12]) || timeEvents[13]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_STOP:
			return stateVector[0] == State.MAIN_STOP;
		case MAIN_MENU:
			return stateVector[0].ordinal() >= State.
					MAIN_MENU.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MENU_R1_SETTINGDURETEEAU.ordinal();
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE:
			return stateVector[0].ordinal() >= State.
					MAIN_MENU_R1_EFFECTUERMAINTENANCE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN.ordinal();
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT:
			return stateVector[0] == State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE:
			return stateVector[0] == State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE:
			return stateVector[0] == State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN:
			return stateVector[0] == State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN:
			return stateVector[0] == State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN;
		case MAIN_MENU_R1_FAVORI:
			return stateVector[0] == State.MAIN_MENU_R1_FAVORI;
		case MAIN_MENU_R1_QTEBOISSON:
			return stateVector[0] == State.MAIN_MENU_R1_QTEBOISSON;
		case MAIN_MENU_R1_DURETEEAU:
			return stateVector[0] == State.MAIN_MENU_R1_DURETEEAU;
		case MAIN_MENU_R1_FILTREEAU_:
			return stateVector[0] == State.MAIN_MENU_R1_FILTREEAU_;
		case MAIN_MENU_R1_ARRÊTAUTOMATIQUE:
			return stateVector[0] == State.MAIN_MENU_R1_ARRÊTAUTOMATIQUE;
		case MAIN_MENU_R1_TEMPERATURECAFE:
			return stateVector[0] == State.MAIN_MENU_R1_TEMPERATURECAFE;
		case MAIN_MENU_R1_NBREBOISSONSSINCEFIRSTUSE:
			return stateVector[0] == State.MAIN_MENU_R1_NBREBOISSONSSINCEFIRSTUSE;
		case MAIN_MENU_R1_BIPSONORE:
			return stateVector[0] == State.MAIN_MENU_R1_BIPSONORE;
		case MAIN_MENU_R1_LANGUE:
			return stateVector[0] == State.MAIN_MENU_R1_LANGUE;
		case MAIN_MENU_R1_NBRECAFEAVENTRETIEN:
			return stateVector[0] == State.MAIN_MENU_R1_NBRECAFEAVENTRETIEN;
		case MAIN_MENU_R1_AFFICHEINFOENTRETIEN:
			return stateVector[0] == State.MAIN_MENU_R1_AFFICHEINFOENTRETIEN;
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT:
			return stateVector[0].ordinal() >= State.
					MAIN_MENU_R1_SETTINGPROPORTIONLAIT.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION.ordinal();
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON;
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION;
		case MAIN_MENU_R1_SETTINGLANGUE:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGLANGUE;
		case MAIN_MENU_R1_SETTINGBIPSONORE:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGBIPSONORE;
		case MAIN_MENU_R1_AFFICHEBOISSONSINCEFIRSTTUSE:
			return stateVector[0] == State.MAIN_MENU_R1_AFFICHEBOISSONSINCEFIRSTTUSE;
		case MAIN_MENU_R1_SETTINGFILTREEAU:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGFILTREEAU;
		case MAIN_MENU_R1_SETTINGTEMPERATURECAFE:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGTEMPERATURECAFE;
		case MAIN_MENU_R1_SETTINGARRETAUTOMATIQUE:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGARRETAUTOMATIQUE;
		case MAIN_MENU_R1_SETTINGFAVORI:
			return stateVector[0].ordinal() >= State.
					MAIN_MENU_R1_SETTINGFAVORI.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT.ordinal();
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT;
		case MAIN_MENU_R1_PROPORTIONLAIT:
			return stateVector[0] == State.MAIN_MENU_R1_PROPORTIONLAIT;
		case MAIN_MENU_R1_MAINTENANCE:
			return stateVector[0] == State.MAIN_MENU_R1_MAINTENANCE;
		case MAIN_MENU_R1_SETTINGQTEBOISSON:
			return stateVector[0].ordinal() >= State.
					MAIN_MENU_R1_SETTINGQTEBOISSON.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON.ordinal();
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON;
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON;
		case MAIN_MENU_R1_SETTINGDURETEEAU:
			return stateVector[0] == State.MAIN_MENU_R1_SETTINGDURETEEAU;
		case MAIN_RINÇAGE:
			return stateVector[0] == State.MAIN_RINÇAGE;
		case MAIN_IDLE:
			return stateVector[0] == State.MAIN_IDLE;
		case MAIN_PREPARATION:
			return stateVector[0].ordinal() >= State.
					MAIN_PREPARATION.ordinal()&& stateVector[0].ordinal() <= State.MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE.ordinal();
		case MAIN_PREPARATION_R1_COOKINGLAIT:
			return stateVector[0] == State.MAIN_PREPARATION_R1_COOKINGLAIT;
		case MAIN_PREPARATION_R1_COOKINGEAUCHAUD:
			return stateVector[0] == State.MAIN_PREPARATION_R1_COOKINGEAUCHAUD;
		case MAIN_PREPARATION_R1_SETTINGS:
			return stateVector[0] == State.MAIN_PREPARATION_R1_SETTINGS;
		case MAIN_PREPARATION_R1_COOKINGCAFE:
			return stateVector[0] == State.MAIN_PREPARATION_R1_COOKINGCAFE;
		case MAIN_PREPARATION_R1_COOKINGCAFELACTE:
			return stateVector[0].ordinal() >= State.
					MAIN_PREPARATION_R1_COOKINGCAFELACTE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE.ordinal();
		case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_LAIT:
			return stateVector[0] == State.MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_LAIT;
		case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE:
			return stateVector[0] == State.MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE;
		case MAIN_APPELFAVORI:
			return stateVector[0] == State.MAIN_APPELFAVORI;
		case MAIN_SECURITE:
			return stateVector[0] == State.MAIN_SECURITE;
		case MAIN_ERREUR:
			return stateVector[0] == State.MAIN_ERREUR;
		case MAIN_PANNE:
			return stateVector[0] == State.MAIN_PANNE;
		case MOULIN_DESACTIVEM:
			return stateVector[1] == State.MOULIN_DESACTIVEM;
		case MOULIN_ACTIVEM:
			return stateVector[1] == State.MOULIN_ACTIVEM;
		case TIMER_TIMER:
			return stateVector[2] == State.TIMER_TIMER;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				start = true;
			}
		});
		runCycle();
	}
	
	private boolean stop;
	
	
	public void raiseStop() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				stop = true;
			}
		});
		runCycle();
	}
	
	private boolean menu;
	
	
	public void raiseMenu() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				menu = true;
			}
		});
		runCycle();
	}
	
	private boolean btnDeplacement;
	
	
	public void raiseBtnDeplacement() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnDeplacement = true;
			}
		});
		runCycle();
	}
	
	private boolean btnPrecedant;
	
	
	public void raiseBtnPrecedant() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnPrecedant = true;
			}
		});
		runCycle();
	}
	
	private boolean btnOk;
	
	
	public void raiseBtnOk() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnOk = true;
			}
		});
		runCycle();
	}
	
	private boolean btnCafe;
	
	
	public void raiseBtnCafe() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnCafe = true;
			}
		});
		runCycle();
	}
	
	private boolean btnLait;
	
	
	public void raiseBtnLait() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnLait = true;
			}
		});
		runCycle();
	}
	
	private boolean btnCafeLait;
	
	
	public void raiseBtnCafeLait() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnCafeLait = true;
			}
		});
		runCycle();
	}
	
	private boolean changeOption;
	
	
	public void raiseChangeOption() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				changeOption = true;
			}
		});
		runCycle();
	}
	
	private boolean btnIntensiteCafe;
	
	
	public void raiseBtnIntensiteCafe() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnIntensiteCafe = true;
			}
		});
		runCycle();
	}
	
	private boolean btnQteBoisson;
	
	
	public void raiseBtnQteBoisson() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnQteBoisson = true;
			}
		});
		runCycle();
	}
	
	private boolean btnAppelFavori;
	
	
	public void raiseBtnAppelFavori() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnAppelFavori = true;
			}
		});
		runCycle();
	}
	
	private boolean btnStartStop;
	
	
	public void raiseBtnStartStop() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnStartStop = true;
			}
		});
		runCycle();
	}
	
	private boolean btnSecurite;
	
	
	public void raiseBtnSecurite() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnSecurite = true;
			}
		});
		runCycle();
	}
	
	private boolean btnEauChaude;
	
	
	public void raiseBtnEauChaude() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnEauChaude = true;
			}
		});
		runCycle();
	}
	
	private boolean btnMouture;
	
	
	public void raiseBtnMouture() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnMouture = true;
			}
		});
		runCycle();
	}
	
	private boolean btnAromDouble;
	
	
	public void raiseBtnAromDouble() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				btnAromDouble = true;
			}
		});
		runCycle();
	}
	
	private boolean selectBoissonSpecial;
	
	
	public void raiseSelectBoissonSpecial() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				selectBoissonSpecial = true;
			}
		});
		runCycle();
	}
	
	private boolean selectBoisson;
	
	
	public void raiseSelectBoisson() {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				selectBoisson = true;
			}
		});
		runCycle();
	}
	
	private boolean pbFiltreEau;
	
	public boolean getPbFiltreEau() {
		return pbFiltreEau;
	}
	
	public void setPbFiltreEau(boolean value) {
		this.pbFiltreEau = value;
	}
	
	private boolean pbMousseurLait;
	
	public boolean getPbMousseurLait() {
		return pbMousseurLait;
	}
	
	public void setPbMousseurLait(boolean value) {
		this.pbMousseurLait = value;
	}
	
	private boolean pbMoulin;
	
	public boolean getPbMoulin() {
		return pbMoulin;
	}
	
	public void setPbMoulin(boolean value) {
		this.pbMoulin = value;
	}
	
	private boolean pbEcran;
	
	public boolean getPbEcran() {
		return pbEcran;
	}
	
	public void setPbEcran(boolean value) {
		this.pbEcran = value;
	}
	
	private boolean pbBandeau;
	
	public boolean getPbBandeau() {
		return pbBandeau;
	}
	
	public void setPbBandeau(boolean value) {
		this.pbBandeau = value;
	}
	
	private boolean pbDefailanceSys;
	
	public boolean getPbDefailanceSys() {
		return pbDefailanceSys;
	}
	
	public void setPbDefailanceSys(boolean value) {
		this.pbDefailanceSys = value;
	}
	
	private boolean breakCooking;
	
	public boolean getBreakCooking() {
		return breakCooking;
	}
	
	public void setBreakCooking(boolean value) {
		this.breakCooking = value;
	}
	
	private long maxBoissonForClean;
	
	public long getMaxBoissonForClean() {
		return maxBoissonForClean;
	}
	
	public void setMaxBoissonForClean(long value) {
		this.maxBoissonForClean = value;
	}
	
	private long maxBoissonForDetardrage;
	
	public long getMaxBoissonForDetardrage() {
		return maxBoissonForDetardrage;
	}
	
	public void setMaxBoissonForDetardrage(long value) {
		this.maxBoissonForDetardrage = value;
	}
	
	private long maxBoissonForChangeFiltre;
	
	public long getMaxBoissonForChangeFiltre() {
		return maxBoissonForChangeFiltre;
	}
	
	public void setMaxBoissonForChangeFiltre(long value) {
		this.maxBoissonForChangeFiltre = value;
	}
	
	private long counterForClean;
	
	public long getCounterForClean() {
		return counterForClean;
	}
	
	public void setCounterForClean(long value) {
		this.counterForClean = value;
	}
	
	private long counterForDetardrage;
	
	public long getCounterForDetardrage() {
		return counterForDetardrage;
	}
	
	public void setCounterForDetardrage(long value) {
		this.counterForDetardrage = value;
	}
	
	private long counterForFiltre;
	
	public long getCounterForFiltre() {
		return counterForFiltre;
	}
	
	public void setCounterForFiltre(long value) {
		this.counterForFiltre = value;
	}
	
	private long etatDuFiltre;
	
	public long getEtatDuFiltre() {
		return etatDuFiltre;
	}
	
	public void setEtatDuFiltre(long value) {
		this.etatDuFiltre = value;
	}
	
	private boolean filtrePlace;
	
	public boolean getFiltrePlace() {
		return filtrePlace;
	}
	
	public void setFiltrePlace(boolean value) {
		this.filtrePlace = value;
	}
	
	private long qteCafeParBoisson;
	
	public long getQteCafeParBoisson() {
		return qteCafeParBoisson;
	}
	
	public void setQteCafeParBoisson(long value) {
		this.qteCafeParBoisson = value;
	}
	
	private long qteEauParBoisson;
	
	public long getQteEauParBoisson() {
		return qteEauParBoisson;
	}
	
	public void setQteEauParBoisson(long value) {
		this.qteEauParBoisson = value;
	}
	
	private long qteDechetParBoisson;
	
	public long getQteDechetParBoisson() {
		return qteDechetParBoisson;
	}
	
	public void setQteDechetParBoisson(long value) {
		this.qteDechetParBoisson = value;
	}
	
	private long nivoCollecteur;
	
	public long getNivoCollecteur() {
		return nivoCollecteur;
	}
	
	public void setNivoCollecteur(long value) {
		this.nivoCollecteur = value;
	}
	
	private long proportionLait;
	
	public long getProportionLait() {
		return proportionLait;
	}
	
	public void setProportionLait(long value) {
		this.proportionLait = value;
	}
	
	private long degreMouture;
	
	public long getDegreMouture() {
		return degreMouture;
	}
	
	public void setDegreMouture(long value) {
		this.degreMouture = value;
	}
	
	private boolean moulin;
	
	public boolean getMoulin() {
		return moulin;
	}
	
	public void setMoulin(boolean value) {
		this.moulin = value;
	}
	
	private boolean estChaud;
	
	public boolean getEstChaud() {
		return estChaud;
	}
	
	public void setEstChaud(boolean value) {
		this.estChaud = value;
	}
	
	private long cafeServi;
	
	public long getCafeServi() {
		return cafeServi;
	}
	
	public void setCafeServi(long value) {
		this.cafeServi = value;
	}
	
	private boolean tampon;
	
	public boolean getTampon() {
		return tampon;
	}
	
	public void setTampon(boolean value) {
		this.tampon = value;
	}
	
	private long choixEntretien;
	
	public long getChoixEntretien() {
		return choixEntretien;
	}
	
	public void setChoixEntretien(long value) {
		this.choixEntretien = value;
	}
	
	private long intensiteCafe;
	
	public long getIntensiteCafe() {
		return intensiteCafe;
	}
	
	public void setIntensiteCafe(long value) {
		this.intensiteCafe = value;
	}
	
	private long qteBoisson;
	
	public long getQteBoisson() {
		return qteBoisson;
	}
	
	public void setQteBoisson(long value) {
		this.qteBoisson = value;
	}
	
	private boolean doubleTasse;
	
	public boolean getDoubleTasse() {
		return doubleTasse;
	}
	
	public void setDoubleTasse(boolean value) {
		this.doubleTasse = value;
	}
	
	private long temps;
	
	public long getTemps() {
		return temps;
	}
	
	public void setTemps(long value) {
		this.temps = value;
	}
	
	private long tempsArretAuto;
	
	public long getTempsArretAuto() {
		return tempsArretAuto;
	}
	
	public void setTempsArretAuto(long value) {
		this.tempsArretAuto = value;
	}
	
	private long timeMaintenance;
	
	public long getTimeMaintenance() {
		return timeMaintenance;
	}
	
	public void setTimeMaintenance(long value) {
		this.timeMaintenance = value;
	}
	
	private long timeCooking;
	
	public long getTimeCooking() {
		return timeCooking;
	}
	
	public void setTimeCooking(long value) {
		this.timeCooking = value;
	}
	
	private long timeTampon;
	
	public long getTimeTampon() {
		return timeTampon;
	}
	
	public void setTimeTampon(long value) {
		this.timeTampon = value;
	}
	
	private long qteCafe;
	
	public long getQteCafe() {
		return qteCafe;
	}
	
	public void setQteCafe(long value) {
		this.qteCafe = value;
	}
	
	private long qteEau;
	
	public long getQteEau() {
		return qteEau;
	}
	
	public void setQteEau(long value) {
		this.qteEau = value;
	}
	
	private long capaciteCollecteur;
	
	public long getCapaciteCollecteur() {
		return capaciteCollecteur;
	}
	
	public void setCapaciteCollecteur(long value) {
		this.capaciteCollecteur = value;
	}
	
	private long typeBoisson;
	
	public long getTypeBoisson() {
		return typeBoisson;
	}
	
	public void setTypeBoisson(long value) {
		this.typeBoisson = value;
	}
	
	private long codeErreur;
	
	public long getCodeErreur() {
		return codeErreur;
	}
	
	public void setCodeErreur(long value) {
		this.codeErreur = value;
	}
	
	private boolean mousseurEstSale;
	
	public boolean getMousseurEstSale() {
		return mousseurEstSale;
	}
	
	public void setMousseurEstSale(boolean value) {
		this.mousseurEstSale = value;
	}
	
	private long nbreBoissonTampon;
	
	public long getNbreBoissonTampon() {
		return nbreBoissonTampon;
	}
	
	public void setNbreBoissonTampon(long value) {
		this.nbreBoissonTampon = value;
	}
	
	private long nbreBoissonCook;
	
	public long getNbreBoissonCook() {
		return nbreBoissonCook;
	}
	
	public void setNbreBoissonCook(long value) {
		this.nbreBoissonCook = value;
	}
	
	private boolean cafeMoulu;
	
	public boolean getCafeMoulu() {
		return cafeMoulu;
	}
	
	public void setCafeMoulu(boolean value) {
		this.cafeMoulu = value;
	}
	
	private boolean lait;
	
	public boolean getLait() {
		return lait;
	}
	
	public void setLait(boolean value) {
		this.lait = value;
	}
	
	private long noOptionMenu;
	
	public long getNoOptionMenu() {
		return noOptionMenu;
	}
	
	public void setNoOptionMenu(long value) {
		this.noOptionMenu = value;
	}
	
	private String txtOptionMenu;
	
	public String getTxtOptionMenu() {
		return txtOptionMenu;
	}
	
	public void setTxtOptionMenu(String value) {
		this.txtOptionMenu = value;
	}
	
	private boolean profilEstConfig;
	
	public boolean getProfilEstConfig() {
		return profilEstConfig;
	}
	
	public void setProfilEstConfig(boolean value) {
		this.profilEstConfig = value;
	}
	
	private boolean bipSonnore;
	
	public boolean getBipSonnore() {
		return bipSonnore;
	}
	
	public void setBipSonnore(boolean value) {
		this.bipSonnore = value;
	}
	
	private boolean langue;
	
	public boolean getLangue() {
		return langue;
	}
	
	public void setLangue(boolean value) {
		this.langue = value;
	}
	
	private boolean connectTubeEtTuyau;
	
	public boolean getConnectTubeEtTuyau() {
		return connectTubeEtTuyau;
	}
	
	public void setConnectTubeEtTuyau(boolean value) {
		this.connectTubeEtTuyau = value;
	}
	
	private boolean tuyauAlait;
	
	public boolean getTuyauAlait() {
		return tuyauAlait;
	}
	
	public void setTuyauAlait(boolean value) {
		this.tuyauAlait = value;
	}
	
	private long sizeTabBoissonSpecial;
	
	public long getSizeTabBoissonSpecial() {
		return sizeTabBoissonSpecial;
	}
	
	public void setSizeTabBoissonSpecial(long value) {
		this.sizeTabBoissonSpecial = value;
	}
	
	private long sizeTabLangue;
	
	public long getSizeTabLangue() {
		return sizeTabLangue;
	}
	
	public void setSizeTabLangue(long value) {
		this.sizeTabLangue = value;
	}
	
	private long sizeTabProfil;
	
	public long getSizeTabProfil() {
		return sizeTabProfil;
	}
	
	public void setSizeTabProfil(long value) {
		this.sizeTabProfil = value;
	}
	
	private long sizeTabBoisson;
	
	public long getSizeTabBoisson() {
		return sizeTabBoisson;
	}
	
	public void setSizeTabBoisson(long value) {
		this.sizeTabBoisson = value;
	}
	
	private long sizeTabQteBoisson;
	
	public long getSizeTabQteBoisson() {
		return sizeTabQteBoisson;
	}
	
	public void setSizeTabQteBoisson(long value) {
		this.sizeTabQteBoisson = value;
	}
	
	private long sizeTabBoissonLactee;
	
	public long getSizeTabBoissonLactee() {
		return sizeTabBoissonLactee;
	}
	
	public void setSizeTabBoissonLactee(long value) {
		this.sizeTabBoissonLactee = value;
	}
	
	private long sizeTabBipSonore;
	
	public long getSizeTabBipSonore() {
		return sizeTabBipSonore;
	}
	
	public void setSizeTabBipSonore(long value) {
		this.sizeTabBipSonore = value;
	}
	
	private long sizeTabArretAuto;
	
	public long getSizeTabArretAuto() {
		return sizeTabArretAuto;
	}
	
	public void setSizeTabArretAuto(long value) {
		this.sizeTabArretAuto = value;
	}
	
	private long sizeTabTemperature;
	
	public long getSizeTabTemperature() {
		return sizeTabTemperature;
	}
	
	public void setSizeTabTemperature(long value) {
		this.sizeTabTemperature = value;
	}
	
	private long sizeTabFiltreEau;
	
	public long getSizeTabFiltreEau() {
		return sizeTabFiltreEau;
	}
	
	public void setSizeTabFiltreEau(long value) {
		this.sizeTabFiltreEau = value;
	}
	
	private long sizeTabDureteEau;
	
	public long getSizeTabDureteEau() {
		return sizeTabDureteEau;
	}
	
	public void setSizeTabDureteEau(long value) {
		this.sizeTabDureteEau = value;
	}
	
	private long sizeTabProportion;
	
	public long getSizeTabProportion() {
		return sizeTabProportion;
	}
	
	public void setSizeTabProportion(long value) {
		this.sizeTabProportion = value;
	}
	
	private long indice;
	
	public long getIndice() {
		return indice;
	}
	
	public void setIndice(long value) {
		this.indice = value;
	}
	
	private boolean check_main_Menu_r1_settingFavori_r1__choice_0_tr0_tr0() {
		return (getTypeBoisson()==4 || getTypeBoisson()==2);
	}
	
	private boolean check_main_Menu_r1_settingFavori_r1__choice_1_tr0_tr0() {
		return getTypeBoisson()==1;
	}
	
	private boolean check_main__choice_0_tr0_tr0() {
		return (getPbDefailanceSys()==true || getPbEcran()==true);
	}
	
	private boolean check_main__choice_0_tr1_tr1() {
		return (getEstChaud()==false && getPbDefailanceSys()==false);
	}
	
	private boolean check_main__choice_1_tr0_tr0() {
		return getCafeServi()!=0;
	}
	
	private boolean check_main_preparation_r1__choice_0_tr0_tr0() {
		return getTypeBoisson()==1;
	}
	
	private boolean check_main_preparation_r1__choice_0_tr1_tr1() {
		return getTypeBoisson()==4;
	}
	
	private boolean check_main_preparation_r1__choice_0_tr3_tr3() {
		return getTypeBoisson()==2;
	}
	
	private boolean check_main_preparation_r1__choice_1_tr0_tr0() {
		return (getPbMoulin()==true && getIntensiteCafe()!=7);
	}
	
	private boolean check_main_preparation_r1__choice_1_tr1_tr1() {
		return getQteEau()<10;
	}
	
	private boolean check_main_preparation_r1__choice_1_tr2_tr2() {
		return (getIntensiteCafe()!=7 && getQteCafe()<5);
	}
	
	private boolean check_main_preparation_r1__choice_1_tr3_tr3() {
		return (getIntensiteCafe()==7 && getCafeMoulu()==false);
	}
	
	private boolean check_main_preparation_r1__choice_1_tr4_tr4() {
		return (((getIntensiteCafe()==6 || getIntensiteCafe()==5)) && getQteBoisson()<=0);
	}
	
	private boolean check_main_preparation_r1__choice_1_tr5_tr5() {
		return (((getIntensiteCafe()==6 || getIntensiteCafe()==5)) && getDoubleTasse()==true);
	}
	
	private boolean check_main_preparation_r1__choice_1_tr6_tr6() {
		return ((((getDoubleTasse()==true && getIntensiteCafe()!=6) && getIntensiteCafe()!=5) && getIntensiteCafe()!=7) && getQteCafe()>5);
	}
	
	private boolean check_main_preparation_r1__choice_1_tr7_tr7() {
		return (((((getIntensiteCafe()==6 || getIntensiteCafe()==5)) && getDoubleTasse()==false) && getQteCafe()>5) && getQteBoisson()>0);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr0_tr0() {
		return getPbMousseurLait()==true;
	}
	
	private boolean check_main_preparation_r1__choice_2_tr1_tr1() {
		return (getPbMoulin()==true && getIntensiteCafe()!=7);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr2_tr2() {
		return getQteEau()<10;
	}
	
	private boolean check_main_preparation_r1__choice_2_tr3_tr3() {
		return (getIntensiteCafe()!=7 && getQteCafe()<5);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr4_tr4() {
		return (getIntensiteCafe()==7 && getCafeMoulu()==false);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr5_tr5() {
		return ((getLait()==false || getTuyauAlait()==false) || getConnectTubeEtTuyau()==false);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr6_tr6() {
		return (((getIntensiteCafe()==6 || getIntensiteCafe()==5)) && getDoubleTasse()==true);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr7_tr7() {
		return (((getIntensiteCafe()==6 || getIntensiteCafe()==5)) && getQteBoisson()<=0);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr9_tr9() {
		return (((((getDoubleTasse()==true && getIntensiteCafe()!=6) && getIntensiteCafe()!=5) && getIntensiteCafe()!=7) && getQteCafe()>5) && getQteEau()>10);
	}
	
	private boolean check_main_preparation_r1__choice_2_tr10_tr10() {
		return ((((((getIntensiteCafe()==6 || getIntensiteCafe()==5)) && getDoubleTasse()==false) && getQteCafe()>5) && getQteBoisson()>0) && getQteEau()>10);
	}
	
	private boolean check_main_preparation_r1__choice_3_tr0_tr0() {
		return getQteEau()<10;
	}
	
	private boolean check_main_preparation_r1__choice_3_tr1_tr1() {
		return getTuyauAlait()==true;
	}
	
	private boolean check_main_preparation_r1__choice_3_tr2_tr2() {
		return !getMousseurEstSale();
	}
	
	private boolean check_main_preparation_r1__choice_4_tr0_tr0() {
		return getPbMousseurLait()==true;
	}
	
	private boolean check_main_preparation_r1__choice_4_tr1_tr1() {
		return ((getLait()==false || getTuyauAlait()==false) || getConnectTubeEtTuyau()==false);
	}
	
	private boolean check_main__choice_2_tr0_tr0() {
		return getProfilEstConfig()==false;
	}
	
	private boolean check_main__choice_2_tr1_tr1() {
		return (getCapaciteCollecteur() - getNivoCollecteur())<1;
	}
	
	private boolean check_main__choice_2_tr2_tr2() {
		return (getMaxBoissonForDetardrage() - getCounterForDetardrage())<=0;
	}
	
	private boolean check_main__choice_2_tr3_tr3() {
		return (getMaxBoissonForClean() - getCounterForClean())<=0;
	}
	
	private void effect_main_Menu_tr1() {
		exitSequence_main_Menu();
		enterSequence_main_idle_default();
	}
	
	private void effect_main_Menu_r1_settingFavori_tr1() {
		exitSequence_main_Menu_r1_settingFavori();
		react_main_Menu_r1__exit_Default();
	}
	
	private void effect_main_preparation_tr2() {
		exitSequence_main_preparation();
		enterSequence_main_Erreur_default();
	}
	
	private void effect_main_Menu_r1_settingFavori_r1__choice_0_tr0() {
		react_main_Menu_r1_settingFavori_r1__exit_Default();
	}
	
	private void effect_main_Menu_r1_settingFavori_r1__choice_0_tr1() {
		setIntensiteCafe(0);
		
		enterSequence_main_Menu_r1_settingFavori_r1_intensiteCafe_default();
	}
	
	private void effect_main_Menu_r1_settingFavori_r1__choice_1_tr0() {
		react_main_Menu_r1_settingFavori_r1__exit_Default();
	}
	
	private void effect_main_Menu_r1_settingFavori_r1__choice_1_tr1() {
		enterSequence_main_Menu_r1_settingFavori_r1_proportionLait_default();
	}
	
	private void effect_main__choice_0_tr0() {
		enterSequence_main_Panne_default();
	}
	
	private void effect_main__choice_0_tr1() {
		enterSequence_main_rin_age_default();
	}
	
	private void effect_main__choice_0_tr2() {
		setEstChaud(false);
		
		enterSequence_main_idle_default();
	}
	
	private void effect_main__choice_1_tr0() {
		enterSequence_main_rin_age_default();
	}
	
	private void effect_main__choice_1_tr1() {
		enterSequence_main_Stop_default();
	}
	
	private void effect_main_preparation_r1__choice_0_tr0() {
		react_main_preparation_r1__choice_1();
	}
	
	private void effect_main_preparation_r1__choice_0_tr1() {
		react_main_preparation_r1__choice_3();
	}
	
	private void effect_main_preparation_r1__choice_0_tr3() {
		react_main_preparation_r1__choice_4();
	}
	
	private void effect_main_preparation_r1__choice_0_tr2() {
		react_main_preparation_r1__choice_2();
	}
	
	private void effect_main_preparation_r1__choice_1_tr0() {
		setCodeErreur(12);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr1() {
		setCodeErreur(2);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr2() {
		setCodeErreur(5);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr3() {
		setCodeErreur(4);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr4() {
		setCodeErreur(8);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr5() {
		setCodeErreur(7);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr6() {
		setTimeCooking(20);
		
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setQteCafe((qteCafe - qteCafeParBoisson));
		
		setQteEau((qteEau - qteEauParBoisson));
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_cookingCafe_default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr7() {
		setTimeCooking(20);
		
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setQteCafe((qteCafe - qteCafeParBoisson));
		
		setQteEau((qteEau - qteEauParBoisson));
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_cookingCafe_default();
	}
	
	private void effect_main_preparation_r1__choice_1_tr8() {
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setQteCafe((qteCafe - qteCafeParBoisson));
		
		setQteEau((qteEau - qteEauParBoisson));
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_cookingCafe_default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr0() {
		setCodeErreur(13);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr1() {
		setCodeErreur(12);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr2() {
		setCodeErreur(2);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr3() {
		setCodeErreur(5);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr4() {
		setCodeErreur(4);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr5() {
		setCodeErreur(3);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr6() {
		setCodeErreur(7);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr7() {
		setCodeErreur(8);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr9() {
		setTimeCooking(20);
		
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setQteCafe((qteCafe - qteCafeParBoisson));
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_CookingCafeLActe_default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr10() {
		setTimeCooking(20);
		
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setQteCafe((qteCafe - qteCafeParBoisson));
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_CookingCafeLActe_default();
	}
	
	private void effect_main_preparation_r1__choice_2_tr8() {
		setTimeCooking(12);
		
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setQteCafe((qteCafe - qteCafeParBoisson));
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_CookingCafeLActe_default();
	}
	
	private void effect_main_preparation_r1__choice_3_tr0() {
		setCodeErreur(2);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_3_tr1() {
		setCodeErreur(11);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_3_tr2() {
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setQteEau((qteEau - qteEauParBoisson));
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_cookingEauChaud_default();
	}
	
	private void effect_main_preparation_r1__choice_3_tr3() {
		setCodeErreur(1);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_4_tr0() {
		setCodeErreur(13);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_4_tr1() {
		setCodeErreur(3);
		
		react_main_preparation_r1__exit_Default();
	}
	
	private void effect_main_preparation_r1__choice_4_tr2() {
		setNbreBoissonCook(getNbreBoissonCook() + 1);
		
		setNivoCollecteur((nivoCollecteur + qteDechetParBoisson));
		
		setCafeServi(getCafeServi() + 1);
		
		setTemps(0);
		
		setCounterForClean(getCounterForClean() + 1);
		
		setCounterForDetardrage(getCounterForDetardrage() + 1);
		
		setCounterForFiltre(getCounterForFiltre() + 1);
		
		enterSequence_main_preparation_r1_cookingLait_default();
	}
	
	private void effect_main__choice_2_tr0() {
		enterSequence_main_idle_default();
	}
	
	private void effect_main__choice_2_tr1() {
		setCodeErreur(6);
		
		enterSequence_main_Erreur_default();
	}
	
	private void effect_main__choice_2_tr2() {
		setCodeErreur(10);
		
		enterSequence_main_Erreur_default();
	}
	
	private void effect_main__choice_2_tr3() {
		setCodeErreur(9);
		
		enterSequence_main_Erreur_default();
	}
	
	private void effect_main__choice_2_tr4() {
		entryAction_main_preparation();
		react_main_preparation_r1__choice_0();
	}
	
	/* Entry action for state 'effectuerMaintenance'. */
	private void entryAction_main_Menu_r1_effectuerMaintenance() {
		setTimeMaintenance(50);
		
		setChoixEntretien(0);
	}
	
	/* Entry action for state 'netoyageMousseurLait'. */
	private void entryAction_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait() {
		timerService.setTimer(this, 0, (1 * 1000), false);
		
		setMousseurEstSale(false);
	}
	
	/* Entry action for state 'netoyage'. */
	private void entryAction_main_Menu_r1_effectuerMaintenance_r1_netoyage() {
		timerService.setTimer(this, 1, (1 * 1000), false);
		
		setTemps(0);
	}
	
	/* Entry action for state 'detartre'. */
	private void entryAction_main_Menu_r1_effectuerMaintenance_r1_detartre() {
		timerService.setTimer(this, 2, (1 * 1000), false);
		
		setTemps(0);
	}
	
	/* Entry action for state 'Calc'Clean'. */
	private void entryAction_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean() {
		timerService.setTimer(this, 3, (1 * 1000), false);
		
		setTemps(0);
	}
	
	/* Entry action for state 'favori'. */
	private void entryAction_main_Menu_r1_favori() {
		setNoOptionMenu(0);
		
		setTxtOptionMenu("Creer/modifier favori");
	}
	
	/* Entry action for state 'QteBoisson'. */
	private void entryAction_main_Menu_r1_QteBoisson() {
		setNoOptionMenu(1);
		
		setTxtOptionMenu("Regler quantite boisson");
	}
	
	/* Entry action for state 'dureteEau'. */
	private void entryAction_main_Menu_r1_dureteEau() {
		setNoOptionMenu(10);
		
		setTxtOptionMenu("Regler durete de l\'eau");
	}
	
	/* Entry action for state 'filtreEau '. */
	private void entryAction_main_Menu_r1_filtreEau_() {
		setNoOptionMenu(7);
		
		setTxtOptionMenu("Filtre \u00E0 eau");
	}
	
	/* Entry action for state 'arrêtAutomatique'. */
	private void entryAction_main_Menu_r1_arr_tAutomatique() {
		setNoOptionMenu(9);
		
		setTxtOptionMenu("Regler Arret automatique");
	}
	
	/* Entry action for state 'TemperatureCafe'. */
	private void entryAction_main_Menu_r1_TemperatureCafe() {
		setNoOptionMenu(8);
		
		setTxtOptionMenu("Regler temperature cafe");
	}
	
	/* Entry action for state 'NbreBoissonsSinceFirstUse'. */
	private void entryAction_main_Menu_r1_NbreBoissonsSinceFirstUse() {
		setNoOptionMenu(6);
		
		setTxtOptionMenu("afficher nbre boissons since first use");
	}
	
	/* Entry action for state 'BipSonore'. */
	private void entryAction_main_Menu_r1_BipSonore() {
		setNoOptionMenu(5);
		
		setTxtOptionMenu("activer/desactive Bip sonnore");
	}
	
	/* Entry action for state 'Langue'. */
	private void entryAction_main_Menu_r1_Langue() {
		setNoOptionMenu(4);
		
		setTxtOptionMenu("regler Langue");
	}
	
	/* Entry action for state 'nbreCafeAvEntretien'. */
	private void entryAction_main_Menu_r1_nbreCafeAvEntretien() {
		setNoOptionMenu(11);
		
		setTxtOptionMenu("Afficher info maintenance");
	}
	
	/* Entry action for state 'ChoisirBoisson'. */
	private void entryAction_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson() {
		setTxtOptionMenu("selectionner une boisson ");
	}
	
	/* Entry action for state 'choisirProportion'. */
	private void entryAction_main_Menu_r1_settingProportionLait_r1_choisirProportion() {
		setTxtOptionMenu("selectionner la prportion de lait");
	}
	
	/* Entry action for state 'selectProfil'. */
	private void entryAction_main_Menu_r1_settingFavori_r1_selectProfil() {
		setTxtOptionMenu("selectionner un profil");
	}
	
	/* Entry action for state 'selectBoisson'. */
	private void entryAction_main_Menu_r1_settingFavori_r1_selectBoisson() {
		setTxtOptionMenu("selectionner une boisson");
	}
	
	/* Entry action for state 'quantiteBoisson'. */
	private void entryAction_main_Menu_r1_settingFavori_r1_quantiteBoisson() {
		setTxtOptionMenu("selectionner la qte de la boisson");
	}
	
	/* Entry action for state 'intensiteCafe'. */
	private void entryAction_main_Menu_r1_settingFavori_r1_intensiteCafe() {
		setTxtOptionMenu("selectionner l intensite du cafe");
	}
	
	/* Entry action for state 'proportionLait'. */
	private void entryAction_main_Menu_r1_settingFavori_r1_proportionLait() {
		setTxtOptionMenu("selectionner la prportion de lait");
	}
	
	/* Entry action for state 'proportionLait'. */
	private void entryAction_main_Menu_r1_proportionLait() {
		setNoOptionMenu(2);
		
		setTxtOptionMenu("Regler proportion lait/cafe");
	}
	
	/* Entry action for state 'maintenance'. */
	private void entryAction_main_Menu_r1_maintenance() {
		setNoOptionMenu(3);
		
		setTxtOptionMenu("effectuer une maintenance");
	}
	
	/* Entry action for state 'QteBoisson'. */
	private void entryAction_main_Menu_r1_settingQteBoisson_r1_QteBoisson() {
		setTxtOptionMenu("selectionner la qte de la boisson");
	}
	
	/* Entry action for state 'selectBoisson'. */
	private void entryAction_main_Menu_r1_settingQteBoisson_r1_selectBoisson() {
		setTxtOptionMenu("selectionner \r\nune boisson");
	}
	
	/* Entry action for state 'rinçage'. */
	private void entryAction_main_rin_age() {
		timerService.setTimer(this, 4, (5 * 1000), false);
		
		timerService.setTimer(this, 5, (5 * 1000), false);
	}
	
	/* Entry action for state 'idle'. */
	private void entryAction_main_idle() {
		timerService.setTimer(this, 6, (1 * 1000), false);
	}
	
	/* Entry action for state 'preparation'. */
	private void entryAction_main_preparation() {
		setTimeCooking(10);
	}
	
	/* Entry action for state 'cookingLait'. */
	private void entryAction_main_preparation_r1_cookingLait() {
		timerService.setTimer(this, 7, (1 * 1000), false);
	}
	
	/* Entry action for state 'cookingEauChaud'. */
	private void entryAction_main_preparation_r1_cookingEauChaud() {
		timerService.setTimer(this, 8, (1 * 1000), false);
	}
	
	/* Entry action for state 'cookingCafe'. */
	private void entryAction_main_preparation_r1_cookingCafe() {
		timerService.setTimer(this, 9, (1 * 1000), false);
		
		if (getIntensiteCafe()!=7) {
			setMoulin(true);
		}
	}
	
	/* Entry action for state 'CookingCafeLActe'. */
	private void entryAction_main_preparation_r1_CookingCafeLActe() {
		if (getIntensiteCafe()!=7) {
			setMoulin(true);
		}
	}
	
	/* Entry action for state 'lait'. */
	private void entryAction_main_preparation_r1_CookingCafeLActe_r1_lait() {
		timerService.setTimer(this, 10, (1 * 1000), false);
	}
	
	/* Entry action for state 'cafe'. */
	private void entryAction_main_preparation_r1_CookingCafeLActe_r1_cafe() {
		timerService.setTimer(this, 11, (1 * 1000), false);
		
		setBreakCooking(false);
	}
	
	/* Entry action for state 'Erreur'. */
	private void entryAction_main_Erreur() {
		timerService.setTimer(this, 12, (5 * 1000), false);
	}
	
	/* Entry action for state 'timer'. */
	private void entryAction_timer_timer() {
		timerService.setTimer(this, 13, (1 * 1000), false);
	}
	
	/* Exit action for state 'Stop'. */
	private void exitAction_main_Stop() {
		setTemps(0);
		
		setCafeServi(0);
		
		setTampon(false);
	}
	
	/* Exit action for state 'netoyageMousseurLait'. */
	private void exitAction_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait() {
		timerService.unsetTimer(this, 0);
		
		if (getCodeErreur()==1) {
			setCodeErreur(0);
			
			setTemps(0);
		}
	}
	
	/* Exit action for state 'netoyage'. */
	private void exitAction_main_Menu_r1_effectuerMaintenance_r1_netoyage() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'detartre'. */
	private void exitAction_main_Menu_r1_effectuerMaintenance_r1_detartre() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Calc'Clean'. */
	private void exitAction_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'rinçage'. */
	private void exitAction_main_rin_age() {
		timerService.unsetTimer(this, 4);
		
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'idle'. */
	private void exitAction_main_idle() {
		timerService.unsetTimer(this, 6);
		
		if (getCafeServi()>5) {
			setEstChaud(true);
		}
	}
	
	/* Exit action for state 'cookingLait'. */
	private void exitAction_main_preparation_r1_cookingLait() {
		timerService.unsetTimer(this, 7);
		
		setLait(false);
		
		setMousseurEstSale(true);
	}
	
	/* Exit action for state 'cookingEauChaud'. */
	private void exitAction_main_preparation_r1_cookingEauChaud() {
		timerService.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'cookingCafe'. */
	private void exitAction_main_preparation_r1_cookingCafe() {
		timerService.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'CookingCafeLActe'. */
	private void exitAction_main_preparation_r1_CookingCafeLActe() {
		setLait(false);
		
		setMousseurEstSale(true);
	}
	
	/* Exit action for state 'lait'. */
	private void exitAction_main_preparation_r1_CookingCafeLActe_r1_lait() {
		timerService.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'cafe'. */
	private void exitAction_main_preparation_r1_CookingCafeLActe_r1_cafe() {
		timerService.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'Erreur'. */
	private void exitAction_main_Erreur() {
		timerService.unsetTimer(this, 12);
	}
	
	/* Exit action for state 'timer'. */
	private void exitAction_timer_timer() {
		timerService.unsetTimer(this, 13);
	}
	
	/* 'default' enter sequence for state Stop */
	private void enterSequence_main_Stop_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_STOP;
	}
	
	/* 'default' enter sequence for state Menu */
	private void enterSequence_main_Menu_default() {
		enterSequence_main_Menu_r1_default();
	}
	
	/* 'default' enter sequence for state effectuerMaintenance */
	private void enterSequence_main_Menu_r1_effectuerMaintenance_default() {
		entryAction_main_Menu_r1_effectuerMaintenance();
		enterSequence_main_Menu_r1_effectuerMaintenance_r1_default();
	}
	
	/* 'default' enter sequence for state netoyageMousseurLait */
	private void enterSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait_default() {
		entryAction_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT;
	}
	
	/* 'default' enter sequence for state netoyage */
	private void enterSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage_default() {
		entryAction_main_Menu_r1_effectuerMaintenance_r1_netoyage();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE;
	}
	
	/* 'default' enter sequence for state detartre */
	private void enterSequence_main_Menu_r1_effectuerMaintenance_r1_detartre_default() {
		entryAction_main_Menu_r1_effectuerMaintenance_r1_detartre();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE;
	}
	
	/* 'default' enter sequence for state Calc'Clean */
	private void enterSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean_default() {
		entryAction_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN;
	}
	
	/* 'default' enter sequence for state entretien */
	private void enterSequence_main_Menu_r1_effectuerMaintenance_r1_entretien_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN;
	}
	
	/* 'default' enter sequence for state favori */
	private void enterSequence_main_Menu_r1_favori_default() {
		entryAction_main_Menu_r1_favori();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_FAVORI;
	}
	
	/* 'default' enter sequence for state QteBoisson */
	private void enterSequence_main_Menu_r1_QteBoisson_default() {
		entryAction_main_Menu_r1_QteBoisson();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_QTEBOISSON;
	}
	
	/* 'default' enter sequence for state dureteEau */
	private void enterSequence_main_Menu_r1_dureteEau_default() {
		entryAction_main_Menu_r1_dureteEau();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_DURETEEAU;
	}
	
	/* 'default' enter sequence for state filtreEau  */
	private void enterSequence_main_Menu_r1_filtreEau__default() {
		entryAction_main_Menu_r1_filtreEau_();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_FILTREEAU_;
	}
	
	/* 'default' enter sequence for state arrêtAutomatique */
	private void enterSequence_main_Menu_r1_arr_tAutomatique_default() {
		entryAction_main_Menu_r1_arr_tAutomatique();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_ARRÊTAUTOMATIQUE;
	}
	
	/* 'default' enter sequence for state TemperatureCafe */
	private void enterSequence_main_Menu_r1_TemperatureCafe_default() {
		entryAction_main_Menu_r1_TemperatureCafe();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_TEMPERATURECAFE;
	}
	
	/* 'default' enter sequence for state NbreBoissonsSinceFirstUse */
	private void enterSequence_main_Menu_r1_NbreBoissonsSinceFirstUse_default() {
		entryAction_main_Menu_r1_NbreBoissonsSinceFirstUse();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_NBREBOISSONSSINCEFIRSTUSE;
	}
	
	/* 'default' enter sequence for state BipSonore */
	private void enterSequence_main_Menu_r1_BipSonore_default() {
		entryAction_main_Menu_r1_BipSonore();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_BIPSONORE;
	}
	
	/* 'default' enter sequence for state Langue */
	private void enterSequence_main_Menu_r1_Langue_default() {
		entryAction_main_Menu_r1_Langue();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_LANGUE;
	}
	
	/* 'default' enter sequence for state nbreCafeAvEntretien */
	private void enterSequence_main_Menu_r1_nbreCafeAvEntretien_default() {
		entryAction_main_Menu_r1_nbreCafeAvEntretien();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_NBRECAFEAVENTRETIEN;
	}
	
	/* 'default' enter sequence for state AfficheInfoEntretien */
	private void enterSequence_main_Menu_r1_AfficheInfoEntretien_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_AFFICHEINFOENTRETIEN;
	}
	
	/* 'default' enter sequence for state settingProportionLait */
	private void enterSequence_main_Menu_r1_settingProportionLait_default() {
		enterSequence_main_Menu_r1_settingProportionLait_r1_default();
	}
	
	/* 'default' enter sequence for state ChoisirBoisson */
	private void enterSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson_default() {
		entryAction_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON;
	}
	
	/* 'default' enter sequence for state choisirProportion */
	private void enterSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion_default() {
		entryAction_main_Menu_r1_settingProportionLait_r1_choisirProportion();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION;
	}
	
	/* 'default' enter sequence for state settingLangue */
	private void enterSequence_main_Menu_r1_settingLangue_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGLANGUE;
	}
	
	/* 'default' enter sequence for state settingBipSonore */
	private void enterSequence_main_Menu_r1_settingBipSonore_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGBIPSONORE;
	}
	
	/* 'default' enter sequence for state AfficheBoissonSinceFirsttUse */
	private void enterSequence_main_Menu_r1_AfficheBoissonSinceFirsttUse_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_AFFICHEBOISSONSINCEFIRSTTUSE;
	}
	
	/* 'default' enter sequence for state settingFiltreEau */
	private void enterSequence_main_Menu_r1_settingFiltreEau_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGFILTREEAU;
	}
	
	/* 'default' enter sequence for state settingTemperatureCafe */
	private void enterSequence_main_Menu_r1_settingTemperatureCafe_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGTEMPERATURECAFE;
	}
	
	/* 'default' enter sequence for state settingArretAutomatique */
	private void enterSequence_main_Menu_r1_settingArretAutomatique_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGARRETAUTOMATIQUE;
	}
	
	/* 'default' enter sequence for state settingFavori */
	private void enterSequence_main_Menu_r1_settingFavori_default() {
		enterSequence_main_Menu_r1_settingFavori_r1_default();
	}
	
	/* 'default' enter sequence for state selectProfil */
	private void enterSequence_main_Menu_r1_settingFavori_r1_selectProfil_default() {
		entryAction_main_Menu_r1_settingFavori_r1_selectProfil();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL;
	}
	
	/* 'default' enter sequence for state selectBoisson */
	private void enterSequence_main_Menu_r1_settingFavori_r1_selectBoisson_default() {
		entryAction_main_Menu_r1_settingFavori_r1_selectBoisson();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON;
	}
	
	/* 'default' enter sequence for state quantiteBoisson */
	private void enterSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson_default() {
		entryAction_main_Menu_r1_settingFavori_r1_quantiteBoisson();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON;
	}
	
	/* 'default' enter sequence for state intensiteCafe */
	private void enterSequence_main_Menu_r1_settingFavori_r1_intensiteCafe_default() {
		entryAction_main_Menu_r1_settingFavori_r1_intensiteCafe();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE;
	}
	
	/* 'default' enter sequence for state proportionLait */
	private void enterSequence_main_Menu_r1_settingFavori_r1_proportionLait_default() {
		entryAction_main_Menu_r1_settingFavori_r1_proportionLait();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT;
	}
	
	/* 'default' enter sequence for state proportionLait */
	private void enterSequence_main_Menu_r1_proportionLait_default() {
		entryAction_main_Menu_r1_proportionLait();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_PROPORTIONLAIT;
	}
	
	/* 'default' enter sequence for state maintenance */
	private void enterSequence_main_Menu_r1_maintenance_default() {
		entryAction_main_Menu_r1_maintenance();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_MAINTENANCE;
	}
	
	/* 'default' enter sequence for state settingQteBoisson */
	private void enterSequence_main_Menu_r1_settingQteBoisson_default() {
		enterSequence_main_Menu_r1_settingQteBoisson_r1_default();
	}
	
	/* 'default' enter sequence for state QteBoisson */
	private void enterSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson_default() {
		entryAction_main_Menu_r1_settingQteBoisson_r1_QteBoisson();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON;
	}
	
	/* 'default' enter sequence for state selectBoisson */
	private void enterSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson_default() {
		entryAction_main_Menu_r1_settingQteBoisson_r1_selectBoisson();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON;
	}
	
	/* 'default' enter sequence for state settingDureteEau */
	private void enterSequence_main_Menu_r1_settingDureteEau_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MENU_R1_SETTINGDURETEEAU;
	}
	
	/* 'default' enter sequence for state rinçage */
	private void enterSequence_main_rin_age_default() {
		entryAction_main_rin_age();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_RINÇAGE;
	}
	
	/* 'default' enter sequence for state idle */
	private void enterSequence_main_idle_default() {
		entryAction_main_idle();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_IDLE;
	}
	
	/* 'default' enter sequence for state preparation */
	private void enterSequence_main_preparation_default() {
		entryAction_main_preparation();
		enterSequence_main_preparation_r1_default();
	}
	
	/* 'default' enter sequence for state cookingLait */
	private void enterSequence_main_preparation_r1_cookingLait_default() {
		entryAction_main_preparation_r1_cookingLait();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_PREPARATION_R1_COOKINGLAIT;
	}
	
	/* 'default' enter sequence for state cookingEauChaud */
	private void enterSequence_main_preparation_r1_cookingEauChaud_default() {
		entryAction_main_preparation_r1_cookingEauChaud();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_PREPARATION_R1_COOKINGEAUCHAUD;
	}
	
	/* 'default' enter sequence for state settings */
	private void enterSequence_main_preparation_r1_settings_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_PREPARATION_R1_SETTINGS;
	}
	
	/* 'default' enter sequence for state cookingCafe */
	private void enterSequence_main_preparation_r1_cookingCafe_default() {
		entryAction_main_preparation_r1_cookingCafe();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_PREPARATION_R1_COOKINGCAFE;
	}
	
	/* 'default' enter sequence for state CookingCafeLActe */
	private void enterSequence_main_preparation_r1_CookingCafeLActe_default() {
		entryAction_main_preparation_r1_CookingCafeLActe();
		enterSequence_main_preparation_r1_CookingCafeLActe_r1_default();
	}
	
	/* 'default' enter sequence for state lait */
	private void enterSequence_main_preparation_r1_CookingCafeLActe_r1_lait_default() {
		entryAction_main_preparation_r1_CookingCafeLActe_r1_lait();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_LAIT;
	}
	
	/* 'default' enter sequence for state cafe */
	private void enterSequence_main_preparation_r1_CookingCafeLActe_r1_cafe_default() {
		entryAction_main_preparation_r1_CookingCafeLActe_r1_cafe();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE;
	}
	
	/* 'default' enter sequence for state AppelFavori */
	private void enterSequence_main_AppelFavori_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_APPELFAVORI;
	}
	
	/* 'default' enter sequence for state securite */
	private void enterSequence_main_securite_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_SECURITE;
	}
	
	/* 'default' enter sequence for state Erreur */
	private void enterSequence_main_Erreur_default() {
		entryAction_main_Erreur();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_ERREUR;
	}
	
	/* 'default' enter sequence for state Panne */
	private void enterSequence_main_Panne_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_PANNE;
	}
	
	/* 'default' enter sequence for state desactiveM */
	private void enterSequence_moulin_desactiveM_default() {
		nextStateIndex = 1;
		stateVector[1] = State.MOULIN_DESACTIVEM;
	}
	
	/* 'default' enter sequence for state activeM */
	private void enterSequence_moulin_activeM_default() {
		nextStateIndex = 1;
		stateVector[1] = State.MOULIN_ACTIVEM;
	}
	
	/* 'default' enter sequence for state timer */
	private void enterSequence_timer_timer_default() {
		entryAction_timer_timer();
		nextStateIndex = 2;
		stateVector[2] = State.TIMER_TIMER;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_Menu_r1_default() {
		react_main_Menu_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_Menu_r1_effectuerMaintenance_r1_default() {
		react_main_Menu_r1_effectuerMaintenance_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_Menu_r1_settingProportionLait_r1_default() {
		react_main_Menu_r1_settingProportionLait_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_Menu_r1_settingFavori_r1_default() {
		react_main_Menu_r1_settingFavori_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_Menu_r1_settingQteBoisson_r1_default() {
		react_main_Menu_r1_settingQteBoisson_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_preparation_r1_default() {
		react_main_preparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_preparation_r1_CookingCafeLActe_r1_default() {
		react_main_preparation_r1_CookingCafeLActe_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region moulin */
	private void enterSequence_moulin_default() {
		react_moulin__entry_Default();
	}
	
	/* 'default' enter sequence for region timer */
	private void enterSequence_timer_default() {
		react_timer__entry_Default();
	}
	
	/* Default exit sequence for state Stop */
	private void exitSequence_main_Stop() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Stop();
	}
	
	/* Default exit sequence for state Menu */
	private void exitSequence_main_Menu() {
		exitSequence_main_Menu_r1();
	}
	
	/* Default exit sequence for state effectuerMaintenance */
	private void exitSequence_main_Menu_r1_effectuerMaintenance() {
		exitSequence_main_Menu_r1_effectuerMaintenance_r1();
	}
	
	/* Default exit sequence for state netoyageMousseurLait */
	private void exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait();
	}
	
	/* Default exit sequence for state netoyage */
	private void exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Menu_r1_effectuerMaintenance_r1_netoyage();
	}
	
	/* Default exit sequence for state detartre */
	private void exitSequence_main_Menu_r1_effectuerMaintenance_r1_detartre() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Menu_r1_effectuerMaintenance_r1_detartre();
	}
	
	/* Default exit sequence for state Calc'Clean */
	private void exitSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean();
	}
	
	/* Default exit sequence for state entretien */
	private void exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state favori */
	private void exitSequence_main_Menu_r1_favori() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state QteBoisson */
	private void exitSequence_main_Menu_r1_QteBoisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state dureteEau */
	private void exitSequence_main_Menu_r1_dureteEau() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state filtreEau  */
	private void exitSequence_main_Menu_r1_filtreEau_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state arrêtAutomatique */
	private void exitSequence_main_Menu_r1_arr_tAutomatique() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state TemperatureCafe */
	private void exitSequence_main_Menu_r1_TemperatureCafe() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state NbreBoissonsSinceFirstUse */
	private void exitSequence_main_Menu_r1_NbreBoissonsSinceFirstUse() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state BipSonore */
	private void exitSequence_main_Menu_r1_BipSonore() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Langue */
	private void exitSequence_main_Menu_r1_Langue() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state nbreCafeAvEntretien */
	private void exitSequence_main_Menu_r1_nbreCafeAvEntretien() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state AfficheInfoEntretien */
	private void exitSequence_main_Menu_r1_AfficheInfoEntretien() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingProportionLait */
	private void exitSequence_main_Menu_r1_settingProportionLait() {
		exitSequence_main_Menu_r1_settingProportionLait_r1();
	}
	
	/* Default exit sequence for state ChoisirBoisson */
	private void exitSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state choisirProportion */
	private void exitSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingLangue */
	private void exitSequence_main_Menu_r1_settingLangue() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingBipSonore */
	private void exitSequence_main_Menu_r1_settingBipSonore() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state AfficheBoissonSinceFirsttUse */
	private void exitSequence_main_Menu_r1_AfficheBoissonSinceFirsttUse() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingFiltreEau */
	private void exitSequence_main_Menu_r1_settingFiltreEau() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingTemperatureCafe */
	private void exitSequence_main_Menu_r1_settingTemperatureCafe() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingArretAutomatique */
	private void exitSequence_main_Menu_r1_settingArretAutomatique() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingFavori */
	private void exitSequence_main_Menu_r1_settingFavori() {
		exitSequence_main_Menu_r1_settingFavori_r1();
	}
	
	/* Default exit sequence for state selectProfil */
	private void exitSequence_main_Menu_r1_settingFavori_r1_selectProfil() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state selectBoisson */
	private void exitSequence_main_Menu_r1_settingFavori_r1_selectBoisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state quantiteBoisson */
	private void exitSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state intensiteCafe */
	private void exitSequence_main_Menu_r1_settingFavori_r1_intensiteCafe() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state proportionLait */
	private void exitSequence_main_Menu_r1_settingFavori_r1_proportionLait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state proportionLait */
	private void exitSequence_main_Menu_r1_proportionLait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state maintenance */
	private void exitSequence_main_Menu_r1_maintenance() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingQteBoisson */
	private void exitSequence_main_Menu_r1_settingQteBoisson() {
		exitSequence_main_Menu_r1_settingQteBoisson_r1();
	}
	
	/* Default exit sequence for state QteBoisson */
	private void exitSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state selectBoisson */
	private void exitSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state settingDureteEau */
	private void exitSequence_main_Menu_r1_settingDureteEau() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state rinçage */
	private void exitSequence_main_rin_age() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_rin_age();
	}
	
	/* Default exit sequence for state idle */
	private void exitSequence_main_idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_idle();
	}
	
	/* Default exit sequence for state preparation */
	private void exitSequence_main_preparation() {
		exitSequence_main_preparation_r1();
	}
	
	/* Default exit sequence for state cookingLait */
	private void exitSequence_main_preparation_r1_cookingLait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_preparation_r1_cookingLait();
	}
	
	/* Default exit sequence for state cookingEauChaud */
	private void exitSequence_main_preparation_r1_cookingEauChaud() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_preparation_r1_cookingEauChaud();
	}
	
	/* Default exit sequence for state settings */
	private void exitSequence_main_preparation_r1_settings() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state cookingCafe */
	private void exitSequence_main_preparation_r1_cookingCafe() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_preparation_r1_cookingCafe();
	}
	
	/* Default exit sequence for state lait */
	private void exitSequence_main_preparation_r1_CookingCafeLActe_r1_lait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_preparation_r1_CookingCafeLActe_r1_lait();
	}
	
	/* Default exit sequence for state cafe */
	private void exitSequence_main_preparation_r1_CookingCafeLActe_r1_cafe() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_preparation_r1_CookingCafeLActe_r1_cafe();
	}
	
	/* Default exit sequence for state AppelFavori */
	private void exitSequence_main_AppelFavori() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state securite */
	private void exitSequence_main_securite() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Erreur */
	private void exitSequence_main_Erreur() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Erreur();
	}
	
	/* Default exit sequence for state Panne */
	private void exitSequence_main_Panne() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state desactiveM */
	private void exitSequence_moulin_desactiveM() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state activeM */
	private void exitSequence_moulin_activeM() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state timer */
	private void exitSequence_timer_timer() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
		
		exitAction_timer_timer();
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case MAIN_STOP:
			exitSequence_main_Stop();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_detartre();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
			break;
		case MAIN_MENU_R1_FAVORI:
			exitSequence_main_Menu_r1_favori();
			break;
		case MAIN_MENU_R1_QTEBOISSON:
			exitSequence_main_Menu_r1_QteBoisson();
			break;
		case MAIN_MENU_R1_DURETEEAU:
			exitSequence_main_Menu_r1_dureteEau();
			break;
		case MAIN_MENU_R1_FILTREEAU_:
			exitSequence_main_Menu_r1_filtreEau_();
			break;
		case MAIN_MENU_R1_ARRÊTAUTOMATIQUE:
			exitSequence_main_Menu_r1_arr_tAutomatique();
			break;
		case MAIN_MENU_R1_TEMPERATURECAFE:
			exitSequence_main_Menu_r1_TemperatureCafe();
			break;
		case MAIN_MENU_R1_NBREBOISSONSSINCEFIRSTUSE:
			exitSequence_main_Menu_r1_NbreBoissonsSinceFirstUse();
			break;
		case MAIN_MENU_R1_BIPSONORE:
			exitSequence_main_Menu_r1_BipSonore();
			break;
		case MAIN_MENU_R1_LANGUE:
			exitSequence_main_Menu_r1_Langue();
			break;
		case MAIN_MENU_R1_NBRECAFEAVENTRETIEN:
			exitSequence_main_Menu_r1_nbreCafeAvEntretien();
			break;
		case MAIN_MENU_R1_AFFICHEINFOENTRETIEN:
			exitSequence_main_Menu_r1_AfficheInfoEntretien();
			break;
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON:
			exitSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson();
			break;
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION:
			exitSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion();
			break;
		case MAIN_MENU_R1_SETTINGLANGUE:
			exitSequence_main_Menu_r1_settingLangue();
			break;
		case MAIN_MENU_R1_SETTINGBIPSONORE:
			exitSequence_main_Menu_r1_settingBipSonore();
			break;
		case MAIN_MENU_R1_AFFICHEBOISSONSINCEFIRSTTUSE:
			exitSequence_main_Menu_r1_AfficheBoissonSinceFirsttUse();
			break;
		case MAIN_MENU_R1_SETTINGFILTREEAU:
			exitSequence_main_Menu_r1_settingFiltreEau();
			break;
		case MAIN_MENU_R1_SETTINGTEMPERATURECAFE:
			exitSequence_main_Menu_r1_settingTemperatureCafe();
			break;
		case MAIN_MENU_R1_SETTINGARRETAUTOMATIQUE:
			exitSequence_main_Menu_r1_settingArretAutomatique();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL:
			exitSequence_main_Menu_r1_settingFavori_r1_selectProfil();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON:
			exitSequence_main_Menu_r1_settingFavori_r1_selectBoisson();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON:
			exitSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE:
			exitSequence_main_Menu_r1_settingFavori_r1_intensiteCafe();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT:
			exitSequence_main_Menu_r1_settingFavori_r1_proportionLait();
			break;
		case MAIN_MENU_R1_PROPORTIONLAIT:
			exitSequence_main_Menu_r1_proportionLait();
			break;
		case MAIN_MENU_R1_MAINTENANCE:
			exitSequence_main_Menu_r1_maintenance();
			break;
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON:
			exitSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson();
			break;
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON:
			exitSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson();
			break;
		case MAIN_MENU_R1_SETTINGDURETEEAU:
			exitSequence_main_Menu_r1_settingDureteEau();
			break;
		case MAIN_RINÇAGE:
			exitSequence_main_rin_age();
			break;
		case MAIN_IDLE:
			exitSequence_main_idle();
			break;
		case MAIN_PREPARATION_R1_COOKINGLAIT:
			exitSequence_main_preparation_r1_cookingLait();
			break;
		case MAIN_PREPARATION_R1_COOKINGEAUCHAUD:
			exitSequence_main_preparation_r1_cookingEauChaud();
			break;
		case MAIN_PREPARATION_R1_SETTINGS:
			exitSequence_main_preparation_r1_settings();
			break;
		case MAIN_PREPARATION_R1_COOKINGCAFE:
			exitSequence_main_preparation_r1_cookingCafe();
			break;
		case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_LAIT:
			exitSequence_main_preparation_r1_CookingCafeLActe_r1_lait();
			exitAction_main_preparation_r1_CookingCafeLActe();
			break;
		case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE:
			exitSequence_main_preparation_r1_CookingCafeLActe_r1_cafe();
			exitAction_main_preparation_r1_CookingCafeLActe();
			break;
		case MAIN_APPELFAVORI:
			exitSequence_main_AppelFavori();
			break;
		case MAIN_SECURITE:
			exitSequence_main_securite();
			break;
		case MAIN_ERREUR:
			exitSequence_main_Erreur();
			break;
		case MAIN_PANNE:
			exitSequence_main_Panne();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_Menu_r1() {
		switch (stateVector[0]) {
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_detartre();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
			break;
		case MAIN_MENU_R1_FAVORI:
			exitSequence_main_Menu_r1_favori();
			break;
		case MAIN_MENU_R1_QTEBOISSON:
			exitSequence_main_Menu_r1_QteBoisson();
			break;
		case MAIN_MENU_R1_DURETEEAU:
			exitSequence_main_Menu_r1_dureteEau();
			break;
		case MAIN_MENU_R1_FILTREEAU_:
			exitSequence_main_Menu_r1_filtreEau_();
			break;
		case MAIN_MENU_R1_ARRÊTAUTOMATIQUE:
			exitSequence_main_Menu_r1_arr_tAutomatique();
			break;
		case MAIN_MENU_R1_TEMPERATURECAFE:
			exitSequence_main_Menu_r1_TemperatureCafe();
			break;
		case MAIN_MENU_R1_NBREBOISSONSSINCEFIRSTUSE:
			exitSequence_main_Menu_r1_NbreBoissonsSinceFirstUse();
			break;
		case MAIN_MENU_R1_BIPSONORE:
			exitSequence_main_Menu_r1_BipSonore();
			break;
		case MAIN_MENU_R1_LANGUE:
			exitSequence_main_Menu_r1_Langue();
			break;
		case MAIN_MENU_R1_NBRECAFEAVENTRETIEN:
			exitSequence_main_Menu_r1_nbreCafeAvEntretien();
			break;
		case MAIN_MENU_R1_AFFICHEINFOENTRETIEN:
			exitSequence_main_Menu_r1_AfficheInfoEntretien();
			break;
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON:
			exitSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson();
			break;
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION:
			exitSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion();
			break;
		case MAIN_MENU_R1_SETTINGLANGUE:
			exitSequence_main_Menu_r1_settingLangue();
			break;
		case MAIN_MENU_R1_SETTINGBIPSONORE:
			exitSequence_main_Menu_r1_settingBipSonore();
			break;
		case MAIN_MENU_R1_AFFICHEBOISSONSINCEFIRSTTUSE:
			exitSequence_main_Menu_r1_AfficheBoissonSinceFirsttUse();
			break;
		case MAIN_MENU_R1_SETTINGFILTREEAU:
			exitSequence_main_Menu_r1_settingFiltreEau();
			break;
		case MAIN_MENU_R1_SETTINGTEMPERATURECAFE:
			exitSequence_main_Menu_r1_settingTemperatureCafe();
			break;
		case MAIN_MENU_R1_SETTINGARRETAUTOMATIQUE:
			exitSequence_main_Menu_r1_settingArretAutomatique();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL:
			exitSequence_main_Menu_r1_settingFavori_r1_selectProfil();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON:
			exitSequence_main_Menu_r1_settingFavori_r1_selectBoisson();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON:
			exitSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE:
			exitSequence_main_Menu_r1_settingFavori_r1_intensiteCafe();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT:
			exitSequence_main_Menu_r1_settingFavori_r1_proportionLait();
			break;
		case MAIN_MENU_R1_PROPORTIONLAIT:
			exitSequence_main_Menu_r1_proportionLait();
			break;
		case MAIN_MENU_R1_MAINTENANCE:
			exitSequence_main_Menu_r1_maintenance();
			break;
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON:
			exitSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson();
			break;
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON:
			exitSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson();
			break;
		case MAIN_MENU_R1_SETTINGDURETEEAU:
			exitSequence_main_Menu_r1_settingDureteEau();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_Menu_r1_effectuerMaintenance_r1() {
		switch (stateVector[0]) {
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGEMOUSSEURLAIT:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_NETOYAGE:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_DETARTRE:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_detartre();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_CALC_CLEAN:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean();
			break;
		case MAIN_MENU_R1_EFFECTUERMAINTENANCE_R1_ENTRETIEN:
			exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_Menu_r1_settingProportionLait_r1() {
		switch (stateVector[0]) {
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRBOISSON:
			exitSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson();
			break;
		case MAIN_MENU_R1_SETTINGPROPORTIONLAIT_R1_CHOISIRPROPORTION:
			exitSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_Menu_r1_settingFavori_r1() {
		switch (stateVector[0]) {
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTPROFIL:
			exitSequence_main_Menu_r1_settingFavori_r1_selectProfil();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_SELECTBOISSON:
			exitSequence_main_Menu_r1_settingFavori_r1_selectBoisson();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_QUANTITEBOISSON:
			exitSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_INTENSITECAFE:
			exitSequence_main_Menu_r1_settingFavori_r1_intensiteCafe();
			break;
		case MAIN_MENU_R1_SETTINGFAVORI_R1_PROPORTIONLAIT:
			exitSequence_main_Menu_r1_settingFavori_r1_proportionLait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_Menu_r1_settingQteBoisson_r1() {
		switch (stateVector[0]) {
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_QTEBOISSON:
			exitSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson();
			break;
		case MAIN_MENU_R1_SETTINGQTEBOISSON_R1_SELECTBOISSON:
			exitSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_preparation_r1() {
		switch (stateVector[0]) {
		case MAIN_PREPARATION_R1_COOKINGLAIT:
			exitSequence_main_preparation_r1_cookingLait();
			break;
		case MAIN_PREPARATION_R1_COOKINGEAUCHAUD:
			exitSequence_main_preparation_r1_cookingEauChaud();
			break;
		case MAIN_PREPARATION_R1_SETTINGS:
			exitSequence_main_preparation_r1_settings();
			break;
		case MAIN_PREPARATION_R1_COOKINGCAFE:
			exitSequence_main_preparation_r1_cookingCafe();
			break;
		case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_LAIT:
			exitSequence_main_preparation_r1_CookingCafeLActe_r1_lait();
			exitAction_main_preparation_r1_CookingCafeLActe();
			break;
		case MAIN_PREPARATION_R1_COOKINGCAFELACTE_R1_CAFE:
			exitSequence_main_preparation_r1_CookingCafeLActe_r1_cafe();
			exitAction_main_preparation_r1_CookingCafeLActe();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region moulin */
	private void exitSequence_moulin() {
		switch (stateVector[1]) {
		case MOULIN_DESACTIVEM:
			exitSequence_moulin_desactiveM();
			break;
		case MOULIN_ACTIVEM:
			exitSequence_moulin_activeM();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region timer */
	private void exitSequence_timer() {
		switch (stateVector[2]) {
		case TIMER_TIMER:
			exitSequence_timer_timer();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_Menu_r1_settingFavori_r1__choice_0() {
		if (check_main_Menu_r1_settingFavori_r1__choice_0_tr0_tr0()) {
			effect_main_Menu_r1_settingFavori_r1__choice_0_tr0();
		} else {
			effect_main_Menu_r1_settingFavori_r1__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_Menu_r1_settingFavori_r1__choice_1() {
		if (check_main_Menu_r1_settingFavori_r1__choice_1_tr0_tr0()) {
			effect_main_Menu_r1_settingFavori_r1__choice_1_tr0();
		} else {
			effect_main_Menu_r1_settingFavori_r1__choice_1_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main__choice_0() {
		if (check_main__choice_0_tr0_tr0()) {
			effect_main__choice_0_tr0();
		} else {
			if (check_main__choice_0_tr1_tr1()) {
				effect_main__choice_0_tr1();
			} else {
				effect_main__choice_0_tr2();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main__choice_1() {
		if (check_main__choice_1_tr0_tr0()) {
			effect_main__choice_1_tr0();
		} else {
			effect_main__choice_1_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_preparation_r1__choice_0() {
		if (check_main_preparation_r1__choice_0_tr0_tr0()) {
			effect_main_preparation_r1__choice_0_tr0();
		} else {
			if (check_main_preparation_r1__choice_0_tr1_tr1()) {
				effect_main_preparation_r1__choice_0_tr1();
			} else {
				if (check_main_preparation_r1__choice_0_tr3_tr3()) {
					effect_main_preparation_r1__choice_0_tr3();
				} else {
					effect_main_preparation_r1__choice_0_tr2();
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_preparation_r1__choice_1() {
		if (check_main_preparation_r1__choice_1_tr0_tr0()) {
			effect_main_preparation_r1__choice_1_tr0();
		} else {
			if (check_main_preparation_r1__choice_1_tr1_tr1()) {
				effect_main_preparation_r1__choice_1_tr1();
			} else {
				if (check_main_preparation_r1__choice_1_tr2_tr2()) {
					effect_main_preparation_r1__choice_1_tr2();
				} else {
					if (check_main_preparation_r1__choice_1_tr3_tr3()) {
						effect_main_preparation_r1__choice_1_tr3();
					} else {
						if (check_main_preparation_r1__choice_1_tr4_tr4()) {
							effect_main_preparation_r1__choice_1_tr4();
						} else {
							if (check_main_preparation_r1__choice_1_tr5_tr5()) {
								effect_main_preparation_r1__choice_1_tr5();
							} else {
								if (check_main_preparation_r1__choice_1_tr6_tr6()) {
									effect_main_preparation_r1__choice_1_tr6();
								} else {
									if (check_main_preparation_r1__choice_1_tr7_tr7()) {
										effect_main_preparation_r1__choice_1_tr7();
									} else {
										effect_main_preparation_r1__choice_1_tr8();
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_preparation_r1__choice_2() {
		if (check_main_preparation_r1__choice_2_tr0_tr0()) {
			effect_main_preparation_r1__choice_2_tr0();
		} else {
			if (check_main_preparation_r1__choice_2_tr1_tr1()) {
				effect_main_preparation_r1__choice_2_tr1();
			} else {
				if (check_main_preparation_r1__choice_2_tr2_tr2()) {
					effect_main_preparation_r1__choice_2_tr2();
				} else {
					if (check_main_preparation_r1__choice_2_tr3_tr3()) {
						effect_main_preparation_r1__choice_2_tr3();
					} else {
						if (check_main_preparation_r1__choice_2_tr4_tr4()) {
							effect_main_preparation_r1__choice_2_tr4();
						} else {
							if (check_main_preparation_r1__choice_2_tr5_tr5()) {
								effect_main_preparation_r1__choice_2_tr5();
							} else {
								if (check_main_preparation_r1__choice_2_tr6_tr6()) {
									effect_main_preparation_r1__choice_2_tr6();
								} else {
									if (check_main_preparation_r1__choice_2_tr7_tr7()) {
										effect_main_preparation_r1__choice_2_tr7();
									} else {
										if (check_main_preparation_r1__choice_2_tr9_tr9()) {
											effect_main_preparation_r1__choice_2_tr9();
										} else {
											if (check_main_preparation_r1__choice_2_tr10_tr10()) {
												effect_main_preparation_r1__choice_2_tr10();
											} else {
												effect_main_preparation_r1__choice_2_tr8();
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_preparation_r1__choice_3() {
		if (check_main_preparation_r1__choice_3_tr0_tr0()) {
			effect_main_preparation_r1__choice_3_tr0();
		} else {
			if (check_main_preparation_r1__choice_3_tr1_tr1()) {
				effect_main_preparation_r1__choice_3_tr1();
			} else {
				if (check_main_preparation_r1__choice_3_tr2_tr2()) {
					effect_main_preparation_r1__choice_3_tr2();
				} else {
					effect_main_preparation_r1__choice_3_tr3();
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_preparation_r1__choice_4() {
		if (check_main_preparation_r1__choice_4_tr0_tr0()) {
			effect_main_preparation_r1__choice_4_tr0();
		} else {
			if (check_main_preparation_r1__choice_4_tr1_tr1()) {
				effect_main_preparation_r1__choice_4_tr1();
			} else {
				effect_main_preparation_r1__choice_4_tr2();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main__choice_2() {
		if (check_main__choice_2_tr0_tr0()) {
			effect_main__choice_2_tr0();
		} else {
			if (check_main__choice_2_tr1_tr1()) {
				effect_main__choice_2_tr1();
			} else {
				if (check_main__choice_2_tr2_tr2()) {
					effect_main__choice_2_tr2();
				} else {
					if (check_main__choice_2_tr3_tr3()) {
						effect_main__choice_2_tr3();
					} else {
						effect_main__choice_2_tr4();
					}
				}
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_Stop_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Menu_r1__entry_Default() {
		enterSequence_main_Menu_r1_favori_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Menu_r1_effectuerMaintenance_r1__entry_Default() {
		enterSequence_main_Menu_r1_effectuerMaintenance_r1_entretien_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Menu_r1_settingProportionLait_r1__entry_Default() {
		enterSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Menu_r1_settingFavori_r1__entry_Default() {
		setIndice(0);
		
		enterSequence_main_Menu_r1_settingFavori_r1_selectProfil_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Menu_r1_settingQteBoisson_r1__entry_Default() {
		setIndice(0);
		
		enterSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_preparation_r1__entry_Default() {
		setIndice(0);
		
		enterSequence_main_preparation_r1_settings_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_preparation_r1_CookingCafeLActe_r1__entry_Default() {
		setTimeTampon((((timeCooking * proportionLait) / 100)));
		
		setTimeCooking((timeCooking - timeTampon));
		
		enterSequence_main_preparation_r1_CookingCafeLActe_r1_lait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_moulin__entry_Default() {
		enterSequence_moulin_desactiveM_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_timer__entry_Default() {
		enterSequence_timer_timer_default();
	}
	
	/* The reactions of exit default. */
	private void react_main_Menu_r1__exit_Default() {
		effect_main_Menu_tr1();
	}
	
	/* The reactions of exit default. */
	private void react_main_Menu_r1_settingFavori_r1__exit_Default() {
		effect_main_Menu_r1_settingFavori_tr1();
	}
	
	/* The reactions of exit default. */
	private void react_main_preparation_r1__exit_Default() {
		effect_main_preparation_tr2();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_Stop_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (start) {
				exitSequence_main_Stop();
				react_main__choice_0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_Menu_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (menu) {
				exitSequence_main_Menu();
				enterSequence_main_idle_default();
			} else {
				if (getTemps()>=getTempsArretAuto()) {
					exitSequence_main_Menu();
					react_main__choice_1();
				} else {
					if ((getPbDefailanceSys()==true || getPbEcran()==true)) {
						exitSequence_main_Menu();
						enterSequence_main_Panne_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_effectuerMaintenance_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (getTimeMaintenance()<0) {
				exitSequence_main_Menu_r1_effectuerMaintenance();
				react_main_Menu_r1__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait();
				setTimeMaintenance(getTimeMaintenance() - 1);
				
				enterSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait_default();
				main_Menu_r1_effectuerMaintenance_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_effectuerMaintenance_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_effectuerMaintenance_r1_netoyage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage();
				setTimeMaintenance(getTimeMaintenance() - 1);
				
				enterSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage_default();
				main_Menu_r1_effectuerMaintenance_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_effectuerMaintenance_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_effectuerMaintenance_r1_detartre_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_Menu_r1_effectuerMaintenance_r1_detartre();
				setTimeMaintenance(getTimeMaintenance() - 1);
				
				enterSequence_main_Menu_r1_effectuerMaintenance_r1_detartre_default();
				main_Menu_r1_effectuerMaintenance_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_effectuerMaintenance_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_effectuerMaintenance_r1_Calc_Clean_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean();
				setTimeMaintenance(getTimeMaintenance() - 1);
				
				enterSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean_default();
				main_Menu_r1_effectuerMaintenance_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_effectuerMaintenance_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_effectuerMaintenance_r1_entretien_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnPrecedant) {
				exitSequence_main_Menu_r1_effectuerMaintenance();
				enterSequence_main_Menu_r1_maintenance_default();
				main_Menu_react(false);
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
					setChoixEntretien((((choixEntretien + 1)) % 4));
					
					enterSequence_main_Menu_r1_effectuerMaintenance_r1_entretien_default();
					main_Menu_r1_effectuerMaintenance_react(false);
				} else {
					if (((start) && (getChoixEntretien()==1))) {
						exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
						setTimeMaintenance(10);
						
						setCounterForClean(0);
						
						enterSequence_main_Menu_r1_effectuerMaintenance_r1_netoyage_default();
						main_Menu_r1_effectuerMaintenance_react(false);
					} else {
						if (((start) && (getChoixEntretien()==0))) {
							exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
							setTimeMaintenance(5);
							
							enterSequence_main_Menu_r1_effectuerMaintenance_r1_netoyageMousseurLait_default();
							main_Menu_r1_effectuerMaintenance_react(false);
						} else {
							if (((start) && (getChoixEntretien()==2))) {
								exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
								setTimeMaintenance(15);
								
								setCounterForDetardrage(0);
								
								enterSequence_main_Menu_r1_effectuerMaintenance_r1_detartre_default();
								main_Menu_r1_effectuerMaintenance_react(false);
							} else {
								if (((start) && (getChoixEntretien()==3))) {
									exitSequence_main_Menu_r1_effectuerMaintenance_r1_entretien();
									setTimeMaintenance(20);
									
									setCounterForDetardrage(0);
									
									setCounterForClean(0);
									
									enterSequence_main_Menu_r1_effectuerMaintenance_r1_Calc_Clean_default();
									main_Menu_r1_effectuerMaintenance_react(false);
								} else {
									did_transition = false;
								}
							}
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_effectuerMaintenance_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_favori_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_favori();
				enterSequence_main_Menu_r1_settingFavori_default();
				main_Menu_react(false);
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_favori();
					enterSequence_main_Menu_r1_QteBoisson_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_QteBoisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_QteBoisson();
				enterSequence_main_Menu_r1_proportionLait_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_QteBoisson();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingQteBoisson_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_dureteEau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_dureteEau();
				enterSequence_main_Menu_r1_favori_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_dureteEau();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingDureteEau_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_filtreEau__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_filtreEau_();
				enterSequence_main_Menu_r1_TemperatureCafe_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_filtreEau_();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingFiltreEau_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_arr_tAutomatique_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_arr_tAutomatique();
				enterSequence_main_Menu_r1_dureteEau_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_arr_tAutomatique();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingArretAutomatique_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_TemperatureCafe_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_TemperatureCafe();
				enterSequence_main_Menu_r1_arr_tAutomatique_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_TemperatureCafe();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingTemperatureCafe_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_NbreBoissonsSinceFirstUse_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_NbreBoissonsSinceFirstUse();
				enterSequence_main_Menu_r1_nbreCafeAvEntretien_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_NbreBoissonsSinceFirstUse();
					enterSequence_main_Menu_r1_AfficheBoissonSinceFirsttUse_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_BipSonore_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_BipSonore();
				enterSequence_main_Menu_r1_NbreBoissonsSinceFirstUse_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_BipSonore();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingBipSonore_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_Langue_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_Langue();
				enterSequence_main_Menu_r1_BipSonore_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_Langue();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingLangue_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_nbreCafeAvEntretien_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_nbreCafeAvEntretien();
				enterSequence_main_Menu_r1_filtreEau__default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_nbreCafeAvEntretien();
					enterSequence_main_Menu_r1_AfficheInfoEntretien_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_AfficheInfoEntretien_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnPrecedant) {
				exitSequence_main_Menu_r1_AfficheInfoEntretien();
				enterSequence_main_Menu_r1_nbreCafeAvEntretien_default();
				main_Menu_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingProportionLait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnPrecedant) {
				exitSequence_main_Menu_r1_settingProportionLait();
				enterSequence_main_Menu_r1_proportionLait_default();
				main_Menu_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingProportionLait_r1_ChoisirBoisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson();
				setIndice(0);
				
				enterSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion_default();
				main_Menu_r1_settingProportionLait_react(false);
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson();
					setIndice((((indice + 1)) % sizeTabBoissonLactee));
					
					enterSequence_main_Menu_r1_settingProportionLait_r1_ChoisirBoisson_default();
					main_Menu_r1_settingProportionLait_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingProportionLait_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingProportionLait_r1_choisirProportion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingProportionLait();
				react_main_Menu_r1__exit_Default();
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion();
					setIndice((((indice + 1)) % sizeTabProportion));
					
					enterSequence_main_Menu_r1_settingProportionLait_r1_choisirProportion_default();
					main_Menu_r1_settingProportionLait_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingProportionLait_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingLangue_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingLangue();
				react_main_Menu_r1__exit_Default();
			} else {
				if (btnPrecedant) {
					exitSequence_main_Menu_r1_settingLangue();
					enterSequence_main_Menu_r1_Langue_default();
					main_Menu_react(false);
				} else {
					if (btnDeplacement) {
						exitSequence_main_Menu_r1_settingLangue();
						setIndice((((indice + 1)) % sizeTabLangue));
						
						enterSequence_main_Menu_r1_settingLangue_default();
						main_Menu_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingBipSonore_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnPrecedant) {
				exitSequence_main_Menu_r1_settingBipSonore();
				enterSequence_main_Menu_r1_BipSonore_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_settingBipSonore();
					react_main_Menu_r1__exit_Default();
				} else {
					if (btnDeplacement) {
						exitSequence_main_Menu_r1_settingBipSonore();
						setIndice((((indice + 1)) % sizeTabBipSonore));
						
						enterSequence_main_Menu_r1_settingBipSonore_default();
						main_Menu_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_AfficheBoissonSinceFirsttUse_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnPrecedant) {
				exitSequence_main_Menu_r1_AfficheBoissonSinceFirsttUse();
				enterSequence_main_Menu_r1_NbreBoissonsSinceFirstUse_default();
				main_Menu_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingFiltreEau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingFiltreEau();
				react_main_Menu_r1__exit_Default();
			} else {
				if (btnPrecedant) {
					exitSequence_main_Menu_r1_settingFiltreEau();
					enterSequence_main_Menu_r1_filtreEau__default();
					main_Menu_react(false);
				} else {
					if (btnDeplacement) {
						exitSequence_main_Menu_r1_settingFiltreEau();
						setIndice((((indice + 1)) % sizeTabFiltreEau));
						
						enterSequence_main_Menu_r1_settingFiltreEau_default();
						main_Menu_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingTemperatureCafe_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingTemperatureCafe();
				react_main_Menu_r1__exit_Default();
			} else {
				if (btnPrecedant) {
					exitSequence_main_Menu_r1_settingTemperatureCafe();
					enterSequence_main_Menu_r1_TemperatureCafe_default();
					main_Menu_react(false);
				} else {
					if (btnDeplacement) {
						exitSequence_main_Menu_r1_settingTemperatureCafe();
						setIndice((((indice + 1)) % sizeTabTemperature));
						
						enterSequence_main_Menu_r1_settingTemperatureCafe_default();
						main_Menu_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingArretAutomatique_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingArretAutomatique();
				react_main_Menu_r1__exit_Default();
			} else {
				if (btnPrecedant) {
					exitSequence_main_Menu_r1_settingArretAutomatique();
					enterSequence_main_Menu_r1_arr_tAutomatique_default();
					main_Menu_react(false);
				} else {
					if (btnDeplacement) {
						exitSequence_main_Menu_r1_settingArretAutomatique();
						setIndice((((indice + 1)) % sizeTabArretAuto));
						
						enterSequence_main_Menu_r1_settingArretAutomatique_default();
						main_Menu_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingFavori_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnPrecedant) {
				exitSequence_main_Menu_r1_settingFavori();
				enterSequence_main_Menu_r1_favori_default();
				main_Menu_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingFavori_r1_selectProfil_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingFavori_r1_selectProfil();
				setIndice(0);
				
				enterSequence_main_Menu_r1_settingFavori_r1_selectBoisson_default();
				main_Menu_r1_settingFavori_react(false);
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_settingFavori_r1_selectProfil();
					setIndice((((indice + 1)) % sizeTabProfil));
					
					enterSequence_main_Menu_r1_settingFavori_r1_selectProfil_default();
					main_Menu_r1_settingFavori_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingFavori_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingFavori_r1_selectBoisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingFavori_r1_selectBoisson();
				setQteBoisson(0);
				
				enterSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson_default();
				main_Menu_r1_settingFavori_react(false);
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_settingFavori_r1_selectBoisson();
					setIndice((((indice + 1)) % sizeTabBoisson));
					
					enterSequence_main_Menu_r1_settingFavori_r1_selectBoisson_default();
					main_Menu_r1_settingFavori_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingFavori_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingFavori_r1_quantiteBoisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson();
				setQteBoisson((((qteBoisson + 1)) % sizeTabQteBoisson));
				
				enterSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson_default();
				main_Menu_r1_settingFavori_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_settingFavori_r1_quantiteBoisson();
					react_main_Menu_r1_settingFavori_r1__choice_0();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingFavori_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingFavori_r1_intensiteCafe_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_settingFavori_r1_intensiteCafe();
				setIntensiteCafe((((intensiteCafe + 1)) % 7));
				
				enterSequence_main_Menu_r1_settingFavori_r1_intensiteCafe_default();
				main_Menu_r1_settingFavori_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_settingFavori_r1_intensiteCafe();
					setIndice(0);
					
					react_main_Menu_r1_settingFavori_r1__choice_1();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingFavori_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingFavori_r1_proportionLait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingFavori_r1_proportionLait();
				react_main_Menu_r1_settingFavori_r1__exit_Default();
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_settingFavori_r1_proportionLait();
					setIndice((((indice + 1)) % sizeTabProportion));
					
					enterSequence_main_Menu_r1_settingFavori_r1_proportionLait_default();
					main_Menu_r1_settingFavori_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingFavori_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_proportionLait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_proportionLait();
				enterSequence_main_Menu_r1_maintenance_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_proportionLait();
					enterSequence_main_Menu_r1_settingProportionLait_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_maintenance_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_maintenance();
				enterSequence_main_Menu_r1_Langue_default();
				main_Menu_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_maintenance();
					enterSequence_main_Menu_r1_effectuerMaintenance_default();
					main_Menu_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingQteBoisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnPrecedant) {
				exitSequence_main_Menu_r1_settingQteBoisson();
				enterSequence_main_Menu_r1_QteBoisson_default();
				main_Menu_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingQteBoisson_r1_QteBoisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingQteBoisson();
				react_main_Menu_r1__exit_Default();
			} else {
				if (btnDeplacement) {
					exitSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson();
					setQteBoisson((((qteBoisson + 1)) % sizeTabQteBoisson));
					
					enterSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson_default();
					main_Menu_r1_settingQteBoisson_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingQteBoisson_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingQteBoisson_r1_selectBoisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnDeplacement) {
				exitSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson();
				setIndice((((indice + 1)) % sizeTabBoisson));
				
				enterSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson_default();
				main_Menu_r1_settingQteBoisson_react(false);
			} else {
				if (btnOk) {
					exitSequence_main_Menu_r1_settingQteBoisson_r1_selectBoisson();
					setIndice(0);
					
					enterSequence_main_Menu_r1_settingQteBoisson_r1_QteBoisson_default();
					main_Menu_r1_settingQteBoisson_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_r1_settingQteBoisson_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_Menu_r1_settingDureteEau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnOk) {
				exitSequence_main_Menu_r1_settingDureteEau();
				react_main_Menu_r1__exit_Default();
			} else {
				if (btnPrecedant) {
					exitSequence_main_Menu_r1_settingDureteEau();
					enterSequence_main_Menu_r1_dureteEau_default();
					main_Menu_react(false);
				} else {
					if (btnDeplacement) {
						exitSequence_main_Menu_r1_settingDureteEau();
						setIndice((((indice + 1)) % sizeTabDureteEau));
						
						enterSequence_main_Menu_r1_settingDureteEau_default();
						main_Menu_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_Menu_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_rin_age_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[4]) && (getTampon()==true))) {
				exitSequence_main_rin_age();
				enterSequence_main_Stop_default();
			} else {
				if (((timeEvents[5]) && (getTampon()==false))) {
					exitSequence_main_rin_age();
					enterSequence_main_idle_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (stop) {
				exitSequence_main_idle();
				react_main__choice_1();
			} else {
				if (((selectBoisson) && (getPbBandeau()==false))) {
					exitSequence_main_idle();
					enterSequence_main_preparation_default();
				} else {
					if (menu) {
						exitSequence_main_idle();
						enterSequence_main_Menu_default();
					} else {
						if (btnAppelFavori) {
							exitSequence_main_idle();
							setIndice(0);
							
							enterSequence_main_AppelFavori_default();
						} else {
							if (btnSecurite) {
								exitSequence_main_idle();
								enterSequence_main_securite_default();
							} else {
								if (getTemps()>=getTempsArretAuto()) {
									exitSequence_main_idle();
									react_main__choice_1();
								} else {
									if ((getPbDefailanceSys()==true || getPbEcran()==true)) {
										exitSequence_main_idle();
										enterSequence_main_Panne_default();
									} else {
										did_transition = false;
									}
								}
							}
						}
					}
				}
			}
		}
		if (did_transition==false) {
			if (timeEvents[6]) {
				setBreakCooking(false);
				
				setTampon(true);
			}
		}
		return did_transition;
	}
	
	private boolean main_preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((btnStartStop) && (!getDoubleTasse()))) {
				exitSequence_main_preparation();
				setMoulin(false);
				
				setBreakCooking(true);
				
				enterSequence_main_idle_default();
			} else {
				if (getTimeCooking()<0) {
					exitSequence_main_preparation();
					setMoulin(false);
					
					enterSequence_main_idle_default();
				} else {
					if ((getMaxBoissonForClean() - getCounterForClean())<=0) {
						exitSequence_main_preparation();
						setCodeErreur(9);
						
						enterSequence_main_Erreur_default();
					} else {
						if ((getMaxBoissonForDetardrage() - getCounterForDetardrage())<=0) {
							exitSequence_main_preparation();
							setCodeErreur(10);
							
							enterSequence_main_Erreur_default();
						} else {
							if (getTemps()>=getTempsArretAuto()) {
								exitSequence_main_preparation();
								react_main__choice_1();
							} else {
								if ((getPbDefailanceSys()==true || getPbEcran()==true)) {
									exitSequence_main_preparation();
									enterSequence_main_Panne_default();
								} else {
									did_transition = false;
								}
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_preparation_r1_cookingLait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence_main_preparation_r1_cookingLait();
				setTimeCooking(getTimeCooking() - 1);
				
				enterSequence_main_preparation_r1_cookingLait_default();
				main_preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_preparation_r1_cookingEauChaud_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_main_preparation_r1_cookingEauChaud();
				setTimeCooking(getTimeCooking() - 1);
				
				enterSequence_main_preparation_r1_cookingEauChaud_default();
				main_preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_preparation_r1_settings_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((btnStartStop) && (getTypeBoisson()==4))) {
				exitSequence_main_preparation_r1_settings();
				react_main_preparation_r1__choice_3();
			} else {
				if (((btnStartStop) && (getTypeBoisson()==2))) {
					exitSequence_main_preparation_r1_settings();
					react_main_preparation_r1__choice_4();
				} else {
					if (((btnStartStop) && (getTypeBoisson()==3))) {
						exitSequence_main_preparation_r1_settings();
						react_main_preparation_r1__choice_2();
					} else {
						if (((btnStartStop) && (getTypeBoisson()==1))) {
							exitSequence_main_preparation_r1_settings();
							react_main_preparation_r1__choice_1();
						} else {
							if (((btnIntensiteCafe) && (((getTypeBoisson()==1 || getTypeBoisson()==3))))) {
								exitSequence_main_preparation_r1_settings();
								setIntensiteCafe((((intensiteCafe + 1)) % 8));
								
								enterSequence_main_preparation_r1_settings_default();
								main_preparation_react(false);
							} else {
								if (btnQteBoisson) {
									exitSequence_main_preparation_r1_settings();
									setQteBoisson((((qteBoisson + 1)) % sizeTabQteBoisson));
									
									enterSequence_main_preparation_r1_settings_default();
									main_preparation_react(false);
								} else {
									if (selectBoissonSpecial) {
										exitSequence_main_preparation_r1_settings();
										setIndice((((indice + 1)) % sizeTabBoissonSpecial));
										
										enterSequence_main_preparation_r1_settings_default();
										main_preparation_react(false);
									} else {
										if ((getCapaciteCollecteur() - getNivoCollecteur())<1) {
											exitSequence_main_preparation_r1_settings();
											setCodeErreur(6);
											
											react_main_preparation_r1__exit_Default();
										} else {
											did_transition = false;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_preparation_r1_cookingCafe_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[9]) {
				exitSequence_main_preparation_r1_cookingCafe();
				setTimeCooking(getTimeCooking() - 1);
				
				enterSequence_main_preparation_r1_cookingCafe_default();
				main_preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_preparation_r1_CookingCafeLActe_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_preparation_r1_CookingCafeLActe_r1_lait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (getTimeTampon()<0) {
				exitSequence_main_preparation_r1_CookingCafeLActe_r1_lait();
				enterSequence_main_preparation_r1_CookingCafeLActe_r1_cafe_default();
				main_preparation_r1_CookingCafeLActe_react(false);
			} else {
				if (timeEvents[10]) {
					exitSequence_main_preparation_r1_CookingCafeLActe_r1_lait();
					setTimeTampon(getTimeTampon() - 1);
					
					enterSequence_main_preparation_r1_CookingCafeLActe_r1_lait_default();
					main_preparation_r1_CookingCafeLActe_react(false);
				} else {
					if (btnStartStop) {
						exitSequence_main_preparation_r1_CookingCafeLActe_r1_lait();
						setBreakCooking(true);
						
						enterSequence_main_preparation_r1_CookingCafeLActe_r1_cafe_default();
						main_preparation_r1_CookingCafeLActe_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_preparation_r1_CookingCafeLActe_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_preparation_r1_CookingCafeLActe_r1_cafe_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[11]) {
				exitSequence_main_preparation_r1_CookingCafeLActe_r1_cafe();
				setTimeCooking(getTimeCooking() - 1);
				
				enterSequence_main_preparation_r1_CookingCafeLActe_r1_cafe_default();
				main_preparation_r1_CookingCafeLActe_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_preparation_r1_CookingCafeLActe_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_AppelFavori_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (getTemps()>=getTempsArretAuto()) {
				exitSequence_main_AppelFavori();
				react_main__choice_1();
			} else {
				if (btnAppelFavori) {
					exitSequence_main_AppelFavori();
					setIndice((((indice + 1)) % sizeTabProfil));
					
					enterSequence_main_AppelFavori_default();
				} else {
					if (btnStartStop) {
						exitSequence_main_AppelFavori();
						react_main__choice_2();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_securite_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (btnSecurite) {
				exitSequence_main_securite();
				enterSequence_main_idle_default();
			} else {
				if (getTemps()>=getTempsArretAuto()) {
					exitSequence_main_securite();
					react_main__choice_1();
				} else {
					if ((getPbDefailanceSys()==true || getPbEcran()==true)) {
						exitSequence_main_securite();
						enterSequence_main_Panne_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_Erreur_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[12]) {
				exitSequence_main_Erreur();
				setCodeErreur(0);
				
				enterSequence_main_idle_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_Panne_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((getPbDefailanceSys()==false && getPbEcran()==false)) {
				exitSequence_main_Panne();
				enterSequence_main_Stop_default();
			} else {
				if (getTemps()>=getTempsArretAuto()) {
					exitSequence_main_Panne();
					enterSequence_main_Stop_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean moulin_desactiveM_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((getIntensiteCafe()!=7 && getMoulin())) {
				exitSequence_moulin_desactiveM();
				enterSequence_moulin_activeM_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean moulin_activeM_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (!getMoulin()) {
				exitSequence_moulin_activeM();
				enterSequence_moulin_desactiveM_default();
			} else {
				if (btnMouture) {
					exitSequence_moulin_activeM();
					setDegreMouture((((degreMouture + 1)) % 5));
					
					enterSequence_moulin_activeM_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean timer_timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[13]) {
				exitSequence_timer_timer();
				setTemps((temps + 1));
				
				enterSequence_timer_timer_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
